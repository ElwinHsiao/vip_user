// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from vipuser.djinni

package per.elwin.vipuser.djinni;

import java.util.concurrent.atomic.AtomicBoolean;
import javax.annotation.CheckForNull;
import javax.annotation.Nonnull;

/*package*/ interface VipuserService {
    /** Instance Method  */
    public void createAccount(@Nonnull AccountInfo account);

    public void login(@Nonnull AccountInfo account);

    public void reLogin(@Nonnull AccessTicket ticket);

    public void logout(@Nonnull AccessTicket ticket);

    public void doBusiness(@Nonnull AccessTicket ticket, @Nonnull byte[] request);

    /** Class Method */
    @CheckForNull
    public static VipuserService createWithListener(@CheckForNull VipuserListener listener)
    {
        return CppProxy.createWithListener(listener);
    }

    static final class CppProxy implements VipuserService
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void _djinni_private_destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            _djinni_private_destroy();
            super.finalize();
        }

        @Override
        public void createAccount(AccountInfo account)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_createAccount(this.nativeRef, account);
        }
        private native void native_createAccount(long _nativeRef, AccountInfo account);

        @Override
        public void login(AccountInfo account)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_login(this.nativeRef, account);
        }
        private native void native_login(long _nativeRef, AccountInfo account);

        @Override
        public void reLogin(AccessTicket ticket)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_reLogin(this.nativeRef, ticket);
        }
        private native void native_reLogin(long _nativeRef, AccessTicket ticket);

        @Override
        public void logout(AccessTicket ticket)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_logout(this.nativeRef, ticket);
        }
        private native void native_logout(long _nativeRef, AccessTicket ticket);

        @Override
        public void doBusiness(AccessTicket ticket, byte[] request)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_doBusiness(this.nativeRef, ticket, request);
        }
        private native void native_doBusiness(long _nativeRef, AccessTicket ticket, byte[] request);

        @CheckForNull
        public static native VipuserService createWithListener(@CheckForNull VipuserListener listener);
    }
}
