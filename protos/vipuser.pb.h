// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vipuser.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_vipuser_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_vipuser_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_vipuser_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_vipuser_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[14]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_vipuser_2eproto;
namespace vipuser_proto {
class AccountInfo;
class AccountInfoDefaultTypeInternal;
extern AccountInfoDefaultTypeInternal _AccountInfo_default_instance_;
class BusinessRequest;
class BusinessRequestDefaultTypeInternal;
extern BusinessRequestDefaultTypeInternal _BusinessRequest_default_instance_;
class BusinessResponse;
class BusinessResponseDefaultTypeInternal;
extern BusinessResponseDefaultTypeInternal _BusinessResponse_default_instance_;
class CreateAccountRequest;
class CreateAccountRequestDefaultTypeInternal;
extern CreateAccountRequestDefaultTypeInternal _CreateAccountRequest_default_instance_;
class CreateAccountResponse;
class CreateAccountResponseDefaultTypeInternal;
extern CreateAccountResponseDefaultTypeInternal _CreateAccountResponse_default_instance_;
class LoginRequest;
class LoginRequestDefaultTypeInternal;
extern LoginRequestDefaultTypeInternal _LoginRequest_default_instance_;
class LoginResponse;
class LoginResponseDefaultTypeInternal;
extern LoginResponseDefaultTypeInternal _LoginResponse_default_instance_;
class LogoutRequest;
class LogoutRequestDefaultTypeInternal;
extern LogoutRequestDefaultTypeInternal _LogoutRequest_default_instance_;
class LogoutResponse;
class LogoutResponseDefaultTypeInternal;
extern LogoutResponseDefaultTypeInternal _LogoutResponse_default_instance_;
class ReLoginRequest;
class ReLoginRequestDefaultTypeInternal;
extern ReLoginRequestDefaultTypeInternal _ReLoginRequest_default_instance_;
class ReLoginResponse;
class ReLoginResponseDefaultTypeInternal;
extern ReLoginResponseDefaultTypeInternal _ReLoginResponse_default_instance_;
class Result;
class ResultDefaultTypeInternal;
extern ResultDefaultTypeInternal _Result_default_instance_;
class TokenInfo;
class TokenInfoDefaultTypeInternal;
extern TokenInfoDefaultTypeInternal _TokenInfo_default_instance_;
class UserSession;
class UserSessionDefaultTypeInternal;
extern UserSessionDefaultTypeInternal _UserSession_default_instance_;
}  // namespace vipuser_proto
PROTOBUF_NAMESPACE_OPEN
template<> ::vipuser_proto::AccountInfo* Arena::CreateMaybeMessage<::vipuser_proto::AccountInfo>(Arena*);
template<> ::vipuser_proto::BusinessRequest* Arena::CreateMaybeMessage<::vipuser_proto::BusinessRequest>(Arena*);
template<> ::vipuser_proto::BusinessResponse* Arena::CreateMaybeMessage<::vipuser_proto::BusinessResponse>(Arena*);
template<> ::vipuser_proto::CreateAccountRequest* Arena::CreateMaybeMessage<::vipuser_proto::CreateAccountRequest>(Arena*);
template<> ::vipuser_proto::CreateAccountResponse* Arena::CreateMaybeMessage<::vipuser_proto::CreateAccountResponse>(Arena*);
template<> ::vipuser_proto::LoginRequest* Arena::CreateMaybeMessage<::vipuser_proto::LoginRequest>(Arena*);
template<> ::vipuser_proto::LoginResponse* Arena::CreateMaybeMessage<::vipuser_proto::LoginResponse>(Arena*);
template<> ::vipuser_proto::LogoutRequest* Arena::CreateMaybeMessage<::vipuser_proto::LogoutRequest>(Arena*);
template<> ::vipuser_proto::LogoutResponse* Arena::CreateMaybeMessage<::vipuser_proto::LogoutResponse>(Arena*);
template<> ::vipuser_proto::ReLoginRequest* Arena::CreateMaybeMessage<::vipuser_proto::ReLoginRequest>(Arena*);
template<> ::vipuser_proto::ReLoginResponse* Arena::CreateMaybeMessage<::vipuser_proto::ReLoginResponse>(Arena*);
template<> ::vipuser_proto::Result* Arena::CreateMaybeMessage<::vipuser_proto::Result>(Arena*);
template<> ::vipuser_proto::TokenInfo* Arena::CreateMaybeMessage<::vipuser_proto::TokenInfo>(Arena*);
template<> ::vipuser_proto::UserSession* Arena::CreateMaybeMessage<::vipuser_proto::UserSession>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace vipuser_proto {

// ===================================================================

class AccountInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vipuser_proto.AccountInfo) */ {
 public:
  AccountInfo();
  virtual ~AccountInfo();

  AccountInfo(const AccountInfo& from);
  AccountInfo(AccountInfo&& from) noexcept
    : AccountInfo() {
    *this = ::std::move(from);
  }

  inline AccountInfo& operator=(const AccountInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccountInfo& operator=(AccountInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AccountInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AccountInfo* internal_default_instance() {
    return reinterpret_cast<const AccountInfo*>(
               &_AccountInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AccountInfo& a, AccountInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(AccountInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AccountInfo* New() const final {
    return CreateMaybeMessage<AccountInfo>(nullptr);
  }

  AccountInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AccountInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AccountInfo& from);
  void MergeFrom(const AccountInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vipuser_proto.AccountInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vipuser_2eproto);
    return ::descriptor_table_vipuser_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserAliasFieldNumber = 1,
    kPasswordSHA256FieldNumber = 2,
  };
  // string userAlias = 1;
  void clear_useralias();
  const std::string& useralias() const;
  void set_useralias(const std::string& value);
  void set_useralias(std::string&& value);
  void set_useralias(const char* value);
  void set_useralias(const char* value, size_t size);
  std::string* mutable_useralias();
  std::string* release_useralias();
  void set_allocated_useralias(std::string* useralias);
  private:
  const std::string& _internal_useralias() const;
  void _internal_set_useralias(const std::string& value);
  std::string* _internal_mutable_useralias();
  public:

  // string passwordSHA256 = 2;
  void clear_passwordsha256();
  const std::string& passwordsha256() const;
  void set_passwordsha256(const std::string& value);
  void set_passwordsha256(std::string&& value);
  void set_passwordsha256(const char* value);
  void set_passwordsha256(const char* value, size_t size);
  std::string* mutable_passwordsha256();
  std::string* release_passwordsha256();
  void set_allocated_passwordsha256(std::string* passwordsha256);
  private:
  const std::string& _internal_passwordsha256() const;
  void _internal_set_passwordsha256(const std::string& value);
  std::string* _internal_mutable_passwordsha256();
  public:

  // @@protoc_insertion_point(class_scope:vipuser_proto.AccountInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr useralias_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr passwordsha256_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vipuser_2eproto;
};
// -------------------------------------------------------------------

class TokenInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vipuser_proto.TokenInfo) */ {
 public:
  TokenInfo();
  virtual ~TokenInfo();

  TokenInfo(const TokenInfo& from);
  TokenInfo(TokenInfo&& from) noexcept
    : TokenInfo() {
    *this = ::std::move(from);
  }

  inline TokenInfo& operator=(const TokenInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline TokenInfo& operator=(TokenInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TokenInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TokenInfo* internal_default_instance() {
    return reinterpret_cast<const TokenInfo*>(
               &_TokenInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TokenInfo& a, TokenInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(TokenInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TokenInfo* New() const final {
    return CreateMaybeMessage<TokenInfo>(nullptr);
  }

  TokenInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TokenInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TokenInfo& from);
  void MergeFrom(const TokenInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TokenInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vipuser_proto.TokenInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vipuser_2eproto);
    return ::descriptor_table_vipuser_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUuidFieldNumber = 1,
    kAccessTokenFieldNumber = 2,
    kRefreshTokenFieldNumber = 3,
  };
  // string uuid = 1;
  void clear_uuid();
  const std::string& uuid() const;
  void set_uuid(const std::string& value);
  void set_uuid(std::string&& value);
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  std::string* mutable_uuid();
  std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // string accessToken = 2;
  void clear_accesstoken();
  const std::string& accesstoken() const;
  void set_accesstoken(const std::string& value);
  void set_accesstoken(std::string&& value);
  void set_accesstoken(const char* value);
  void set_accesstoken(const char* value, size_t size);
  std::string* mutable_accesstoken();
  std::string* release_accesstoken();
  void set_allocated_accesstoken(std::string* accesstoken);
  private:
  const std::string& _internal_accesstoken() const;
  void _internal_set_accesstoken(const std::string& value);
  std::string* _internal_mutable_accesstoken();
  public:

  // string refreshToken = 3;
  void clear_refreshtoken();
  const std::string& refreshtoken() const;
  void set_refreshtoken(const std::string& value);
  void set_refreshtoken(std::string&& value);
  void set_refreshtoken(const char* value);
  void set_refreshtoken(const char* value, size_t size);
  std::string* mutable_refreshtoken();
  std::string* release_refreshtoken();
  void set_allocated_refreshtoken(std::string* refreshtoken);
  private:
  const std::string& _internal_refreshtoken() const;
  void _internal_set_refreshtoken(const std::string& value);
  std::string* _internal_mutable_refreshtoken();
  public:

  // @@protoc_insertion_point(class_scope:vipuser_proto.TokenInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr accesstoken_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr refreshtoken_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vipuser_2eproto;
};
// -------------------------------------------------------------------

class Result :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vipuser_proto.Result) */ {
 public:
  Result();
  virtual ~Result();

  Result(const Result& from);
  Result(Result&& from) noexcept
    : Result() {
    *this = ::std::move(from);
  }

  inline Result& operator=(const Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline Result& operator=(Result&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Result& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Result* internal_default_instance() {
    return reinterpret_cast<const Result*>(
               &_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Result& a, Result& b) {
    a.Swap(&b);
  }
  inline void Swap(Result* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Result* New() const final {
    return CreateMaybeMessage<Result>(nullptr);
  }

  Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Result>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Result& from);
  void MergeFrom(const Result& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vipuser_proto.Result";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vipuser_2eproto);
    return ::descriptor_table_vipuser_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kCodeFieldNumber = 1,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // int32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:vipuser_proto.Result)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vipuser_2eproto;
};
// -------------------------------------------------------------------

class CreateAccountRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vipuser_proto.CreateAccountRequest) */ {
 public:
  CreateAccountRequest();
  virtual ~CreateAccountRequest();

  CreateAccountRequest(const CreateAccountRequest& from);
  CreateAccountRequest(CreateAccountRequest&& from) noexcept
    : CreateAccountRequest() {
    *this = ::std::move(from);
  }

  inline CreateAccountRequest& operator=(const CreateAccountRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateAccountRequest& operator=(CreateAccountRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateAccountRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateAccountRequest* internal_default_instance() {
    return reinterpret_cast<const CreateAccountRequest*>(
               &_CreateAccountRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CreateAccountRequest& a, CreateAccountRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateAccountRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateAccountRequest* New() const final {
    return CreateMaybeMessage<CreateAccountRequest>(nullptr);
  }

  CreateAccountRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateAccountRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateAccountRequest& from);
  void MergeFrom(const CreateAccountRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateAccountRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vipuser_proto.CreateAccountRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vipuser_2eproto);
    return ::descriptor_table_vipuser_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountInfoFieldNumber = 1,
  };
  // .vipuser_proto.AccountInfo accountInfo = 1;
  bool has_accountinfo() const;
  private:
  bool _internal_has_accountinfo() const;
  public:
  void clear_accountinfo();
  const ::vipuser_proto::AccountInfo& accountinfo() const;
  ::vipuser_proto::AccountInfo* release_accountinfo();
  ::vipuser_proto::AccountInfo* mutable_accountinfo();
  void set_allocated_accountinfo(::vipuser_proto::AccountInfo* accountinfo);
  private:
  const ::vipuser_proto::AccountInfo& _internal_accountinfo() const;
  ::vipuser_proto::AccountInfo* _internal_mutable_accountinfo();
  public:

  // @@protoc_insertion_point(class_scope:vipuser_proto.CreateAccountRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::vipuser_proto::AccountInfo* accountinfo_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vipuser_2eproto;
};
// -------------------------------------------------------------------

class CreateAccountResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vipuser_proto.CreateAccountResponse) */ {
 public:
  CreateAccountResponse();
  virtual ~CreateAccountResponse();

  CreateAccountResponse(const CreateAccountResponse& from);
  CreateAccountResponse(CreateAccountResponse&& from) noexcept
    : CreateAccountResponse() {
    *this = ::std::move(from);
  }

  inline CreateAccountResponse& operator=(const CreateAccountResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateAccountResponse& operator=(CreateAccountResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateAccountResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateAccountResponse* internal_default_instance() {
    return reinterpret_cast<const CreateAccountResponse*>(
               &_CreateAccountResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CreateAccountResponse& a, CreateAccountResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateAccountResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateAccountResponse* New() const final {
    return CreateMaybeMessage<CreateAccountResponse>(nullptr);
  }

  CreateAccountResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateAccountResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateAccountResponse& from);
  void MergeFrom(const CreateAccountResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateAccountResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vipuser_proto.CreateAccountResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vipuser_2eproto);
    return ::descriptor_table_vipuser_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
    kTokenInfoFieldNumber = 2,
  };
  // .vipuser_proto.Result result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::vipuser_proto::Result& result() const;
  ::vipuser_proto::Result* release_result();
  ::vipuser_proto::Result* mutable_result();
  void set_allocated_result(::vipuser_proto::Result* result);
  private:
  const ::vipuser_proto::Result& _internal_result() const;
  ::vipuser_proto::Result* _internal_mutable_result();
  public:

  // .vipuser_proto.TokenInfo tokenInfo = 2;
  bool has_tokeninfo() const;
  private:
  bool _internal_has_tokeninfo() const;
  public:
  void clear_tokeninfo();
  const ::vipuser_proto::TokenInfo& tokeninfo() const;
  ::vipuser_proto::TokenInfo* release_tokeninfo();
  ::vipuser_proto::TokenInfo* mutable_tokeninfo();
  void set_allocated_tokeninfo(::vipuser_proto::TokenInfo* tokeninfo);
  private:
  const ::vipuser_proto::TokenInfo& _internal_tokeninfo() const;
  ::vipuser_proto::TokenInfo* _internal_mutable_tokeninfo();
  public:

  // @@protoc_insertion_point(class_scope:vipuser_proto.CreateAccountResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::vipuser_proto::Result* result_;
  ::vipuser_proto::TokenInfo* tokeninfo_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vipuser_2eproto;
};
// -------------------------------------------------------------------

class LoginRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vipuser_proto.LoginRequest) */ {
 public:
  LoginRequest();
  virtual ~LoginRequest();

  LoginRequest(const LoginRequest& from);
  LoginRequest(LoginRequest&& from) noexcept
    : LoginRequest() {
    *this = ::std::move(from);
  }

  inline LoginRequest& operator=(const LoginRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginRequest& operator=(LoginRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoginRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginRequest* internal_default_instance() {
    return reinterpret_cast<const LoginRequest*>(
               &_LoginRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(LoginRequest& a, LoginRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginRequest* New() const final {
    return CreateMaybeMessage<LoginRequest>(nullptr);
  }

  LoginRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginRequest& from);
  void MergeFrom(const LoginRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vipuser_proto.LoginRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vipuser_2eproto);
    return ::descriptor_table_vipuser_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountInfoFieldNumber = 1,
  };
  // .vipuser_proto.AccountInfo accountInfo = 1;
  bool has_accountinfo() const;
  private:
  bool _internal_has_accountinfo() const;
  public:
  void clear_accountinfo();
  const ::vipuser_proto::AccountInfo& accountinfo() const;
  ::vipuser_proto::AccountInfo* release_accountinfo();
  ::vipuser_proto::AccountInfo* mutable_accountinfo();
  void set_allocated_accountinfo(::vipuser_proto::AccountInfo* accountinfo);
  private:
  const ::vipuser_proto::AccountInfo& _internal_accountinfo() const;
  ::vipuser_proto::AccountInfo* _internal_mutable_accountinfo();
  public:

  // @@protoc_insertion_point(class_scope:vipuser_proto.LoginRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::vipuser_proto::AccountInfo* accountinfo_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vipuser_2eproto;
};
// -------------------------------------------------------------------

class LoginResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vipuser_proto.LoginResponse) */ {
 public:
  LoginResponse();
  virtual ~LoginResponse();

  LoginResponse(const LoginResponse& from);
  LoginResponse(LoginResponse&& from) noexcept
    : LoginResponse() {
    *this = ::std::move(from);
  }

  inline LoginResponse& operator=(const LoginResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginResponse& operator=(LoginResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoginResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginResponse* internal_default_instance() {
    return reinterpret_cast<const LoginResponse*>(
               &_LoginResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(LoginResponse& a, LoginResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginResponse* New() const final {
    return CreateMaybeMessage<LoginResponse>(nullptr);
  }

  LoginResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginResponse& from);
  void MergeFrom(const LoginResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vipuser_proto.LoginResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vipuser_2eproto);
    return ::descriptor_table_vipuser_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
    kTokenInfoFieldNumber = 2,
  };
  // .vipuser_proto.Result result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::vipuser_proto::Result& result() const;
  ::vipuser_proto::Result* release_result();
  ::vipuser_proto::Result* mutable_result();
  void set_allocated_result(::vipuser_proto::Result* result);
  private:
  const ::vipuser_proto::Result& _internal_result() const;
  ::vipuser_proto::Result* _internal_mutable_result();
  public:

  // .vipuser_proto.TokenInfo tokenInfo = 2;
  bool has_tokeninfo() const;
  private:
  bool _internal_has_tokeninfo() const;
  public:
  void clear_tokeninfo();
  const ::vipuser_proto::TokenInfo& tokeninfo() const;
  ::vipuser_proto::TokenInfo* release_tokeninfo();
  ::vipuser_proto::TokenInfo* mutable_tokeninfo();
  void set_allocated_tokeninfo(::vipuser_proto::TokenInfo* tokeninfo);
  private:
  const ::vipuser_proto::TokenInfo& _internal_tokeninfo() const;
  ::vipuser_proto::TokenInfo* _internal_mutable_tokeninfo();
  public:

  // @@protoc_insertion_point(class_scope:vipuser_proto.LoginResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::vipuser_proto::Result* result_;
  ::vipuser_proto::TokenInfo* tokeninfo_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vipuser_2eproto;
};
// -------------------------------------------------------------------

class LogoutRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vipuser_proto.LogoutRequest) */ {
 public:
  LogoutRequest();
  virtual ~LogoutRequest();

  LogoutRequest(const LogoutRequest& from);
  LogoutRequest(LogoutRequest&& from) noexcept
    : LogoutRequest() {
    *this = ::std::move(from);
  }

  inline LogoutRequest& operator=(const LogoutRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogoutRequest& operator=(LogoutRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LogoutRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogoutRequest* internal_default_instance() {
    return reinterpret_cast<const LogoutRequest*>(
               &_LogoutRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(LogoutRequest& a, LogoutRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LogoutRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogoutRequest* New() const final {
    return CreateMaybeMessage<LogoutRequest>(nullptr);
  }

  LogoutRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogoutRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LogoutRequest& from);
  void MergeFrom(const LogoutRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogoutRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vipuser_proto.LogoutRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vipuser_2eproto);
    return ::descriptor_table_vipuser_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccessTokenFieldNumber = 1,
  };
  // string accessToken = 1;
  void clear_accesstoken();
  const std::string& accesstoken() const;
  void set_accesstoken(const std::string& value);
  void set_accesstoken(std::string&& value);
  void set_accesstoken(const char* value);
  void set_accesstoken(const char* value, size_t size);
  std::string* mutable_accesstoken();
  std::string* release_accesstoken();
  void set_allocated_accesstoken(std::string* accesstoken);
  private:
  const std::string& _internal_accesstoken() const;
  void _internal_set_accesstoken(const std::string& value);
  std::string* _internal_mutable_accesstoken();
  public:

  // @@protoc_insertion_point(class_scope:vipuser_proto.LogoutRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr accesstoken_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vipuser_2eproto;
};
// -------------------------------------------------------------------

class LogoutResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vipuser_proto.LogoutResponse) */ {
 public:
  LogoutResponse();
  virtual ~LogoutResponse();

  LogoutResponse(const LogoutResponse& from);
  LogoutResponse(LogoutResponse&& from) noexcept
    : LogoutResponse() {
    *this = ::std::move(from);
  }

  inline LogoutResponse& operator=(const LogoutResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogoutResponse& operator=(LogoutResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LogoutResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogoutResponse* internal_default_instance() {
    return reinterpret_cast<const LogoutResponse*>(
               &_LogoutResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(LogoutResponse& a, LogoutResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LogoutResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogoutResponse* New() const final {
    return CreateMaybeMessage<LogoutResponse>(nullptr);
  }

  LogoutResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogoutResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LogoutResponse& from);
  void MergeFrom(const LogoutResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogoutResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vipuser_proto.LogoutResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vipuser_2eproto);
    return ::descriptor_table_vipuser_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // .vipuser_proto.Result result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::vipuser_proto::Result& result() const;
  ::vipuser_proto::Result* release_result();
  ::vipuser_proto::Result* mutable_result();
  void set_allocated_result(::vipuser_proto::Result* result);
  private:
  const ::vipuser_proto::Result& _internal_result() const;
  ::vipuser_proto::Result* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:vipuser_proto.LogoutResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::vipuser_proto::Result* result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vipuser_2eproto;
};
// -------------------------------------------------------------------

class ReLoginRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vipuser_proto.ReLoginRequest) */ {
 public:
  ReLoginRequest();
  virtual ~ReLoginRequest();

  ReLoginRequest(const ReLoginRequest& from);
  ReLoginRequest(ReLoginRequest&& from) noexcept
    : ReLoginRequest() {
    *this = ::std::move(from);
  }

  inline ReLoginRequest& operator=(const ReLoginRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReLoginRequest& operator=(ReLoginRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReLoginRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReLoginRequest* internal_default_instance() {
    return reinterpret_cast<const ReLoginRequest*>(
               &_ReLoginRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ReLoginRequest& a, ReLoginRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ReLoginRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReLoginRequest* New() const final {
    return CreateMaybeMessage<ReLoginRequest>(nullptr);
  }

  ReLoginRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReLoginRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReLoginRequest& from);
  void MergeFrom(const ReLoginRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReLoginRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vipuser_proto.ReLoginRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vipuser_2eproto);
    return ::descriptor_table_vipuser_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRefreshTokenFieldNumber = 1,
  };
  // string refreshToken = 1;
  void clear_refreshtoken();
  const std::string& refreshtoken() const;
  void set_refreshtoken(const std::string& value);
  void set_refreshtoken(std::string&& value);
  void set_refreshtoken(const char* value);
  void set_refreshtoken(const char* value, size_t size);
  std::string* mutable_refreshtoken();
  std::string* release_refreshtoken();
  void set_allocated_refreshtoken(std::string* refreshtoken);
  private:
  const std::string& _internal_refreshtoken() const;
  void _internal_set_refreshtoken(const std::string& value);
  std::string* _internal_mutable_refreshtoken();
  public:

  // @@protoc_insertion_point(class_scope:vipuser_proto.ReLoginRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr refreshtoken_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vipuser_2eproto;
};
// -------------------------------------------------------------------

class ReLoginResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vipuser_proto.ReLoginResponse) */ {
 public:
  ReLoginResponse();
  virtual ~ReLoginResponse();

  ReLoginResponse(const ReLoginResponse& from);
  ReLoginResponse(ReLoginResponse&& from) noexcept
    : ReLoginResponse() {
    *this = ::std::move(from);
  }

  inline ReLoginResponse& operator=(const ReLoginResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReLoginResponse& operator=(ReLoginResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReLoginResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReLoginResponse* internal_default_instance() {
    return reinterpret_cast<const ReLoginResponse*>(
               &_ReLoginResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ReLoginResponse& a, ReLoginResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ReLoginResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReLoginResponse* New() const final {
    return CreateMaybeMessage<ReLoginResponse>(nullptr);
  }

  ReLoginResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReLoginResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReLoginResponse& from);
  void MergeFrom(const ReLoginResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReLoginResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vipuser_proto.ReLoginResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vipuser_2eproto);
    return ::descriptor_table_vipuser_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
    kTokenInfoFieldNumber = 2,
  };
  // .vipuser_proto.Result result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::vipuser_proto::Result& result() const;
  ::vipuser_proto::Result* release_result();
  ::vipuser_proto::Result* mutable_result();
  void set_allocated_result(::vipuser_proto::Result* result);
  private:
  const ::vipuser_proto::Result& _internal_result() const;
  ::vipuser_proto::Result* _internal_mutable_result();
  public:

  // .vipuser_proto.TokenInfo tokenInfo = 2;
  bool has_tokeninfo() const;
  private:
  bool _internal_has_tokeninfo() const;
  public:
  void clear_tokeninfo();
  const ::vipuser_proto::TokenInfo& tokeninfo() const;
  ::vipuser_proto::TokenInfo* release_tokeninfo();
  ::vipuser_proto::TokenInfo* mutable_tokeninfo();
  void set_allocated_tokeninfo(::vipuser_proto::TokenInfo* tokeninfo);
  private:
  const ::vipuser_proto::TokenInfo& _internal_tokeninfo() const;
  ::vipuser_proto::TokenInfo* _internal_mutable_tokeninfo();
  public:

  // @@protoc_insertion_point(class_scope:vipuser_proto.ReLoginResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::vipuser_proto::Result* result_;
  ::vipuser_proto::TokenInfo* tokeninfo_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vipuser_2eproto;
};
// -------------------------------------------------------------------

class UserSession :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vipuser_proto.UserSession) */ {
 public:
  UserSession();
  virtual ~UserSession();

  UserSession(const UserSession& from);
  UserSession(UserSession&& from) noexcept
    : UserSession() {
    *this = ::std::move(from);
  }

  inline UserSession& operator=(const UserSession& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserSession& operator=(UserSession&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserSession& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserSession* internal_default_instance() {
    return reinterpret_cast<const UserSession*>(
               &_UserSession_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(UserSession& a, UserSession& b) {
    a.Swap(&b);
  }
  inline void Swap(UserSession* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserSession* New() const final {
    return CreateMaybeMessage<UserSession>(nullptr);
  }

  UserSession* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserSession>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserSession& from);
  void MergeFrom(const UserSession& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserSession* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vipuser_proto.UserSession";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vipuser_2eproto);
    return ::descriptor_table_vipuser_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUuidFieldNumber = 1,
    kAccessTokenFieldNumber = 2,
  };
  // string uuid = 1;
  void clear_uuid();
  const std::string& uuid() const;
  void set_uuid(const std::string& value);
  void set_uuid(std::string&& value);
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  std::string* mutable_uuid();
  std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // string accessToken = 2;
  void clear_accesstoken();
  const std::string& accesstoken() const;
  void set_accesstoken(const std::string& value);
  void set_accesstoken(std::string&& value);
  void set_accesstoken(const char* value);
  void set_accesstoken(const char* value, size_t size);
  std::string* mutable_accesstoken();
  std::string* release_accesstoken();
  void set_allocated_accesstoken(std::string* accesstoken);
  private:
  const std::string& _internal_accesstoken() const;
  void _internal_set_accesstoken(const std::string& value);
  std::string* _internal_mutable_accesstoken();
  public:

  // @@protoc_insertion_point(class_scope:vipuser_proto.UserSession)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr accesstoken_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vipuser_2eproto;
};
// -------------------------------------------------------------------

class BusinessRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vipuser_proto.BusinessRequest) */ {
 public:
  BusinessRequest();
  virtual ~BusinessRequest();

  BusinessRequest(const BusinessRequest& from);
  BusinessRequest(BusinessRequest&& from) noexcept
    : BusinessRequest() {
    *this = ::std::move(from);
  }

  inline BusinessRequest& operator=(const BusinessRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BusinessRequest& operator=(BusinessRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BusinessRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BusinessRequest* internal_default_instance() {
    return reinterpret_cast<const BusinessRequest*>(
               &_BusinessRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(BusinessRequest& a, BusinessRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BusinessRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BusinessRequest* New() const final {
    return CreateMaybeMessage<BusinessRequest>(nullptr);
  }

  BusinessRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BusinessRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BusinessRequest& from);
  void MergeFrom(const BusinessRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BusinessRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vipuser_proto.BusinessRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vipuser_2eproto);
    return ::descriptor_table_vipuser_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestFieldNumber = 2,
    kSessionFieldNumber = 1,
  };
  // bytes request = 2;
  void clear_request();
  const std::string& request() const;
  void set_request(const std::string& value);
  void set_request(std::string&& value);
  void set_request(const char* value);
  void set_request(const void* value, size_t size);
  std::string* mutable_request();
  std::string* release_request();
  void set_allocated_request(std::string* request);
  private:
  const std::string& _internal_request() const;
  void _internal_set_request(const std::string& value);
  std::string* _internal_mutable_request();
  public:

  // .vipuser_proto.UserSession session = 1;
  bool has_session() const;
  private:
  bool _internal_has_session() const;
  public:
  void clear_session();
  const ::vipuser_proto::UserSession& session() const;
  ::vipuser_proto::UserSession* release_session();
  ::vipuser_proto::UserSession* mutable_session();
  void set_allocated_session(::vipuser_proto::UserSession* session);
  private:
  const ::vipuser_proto::UserSession& _internal_session() const;
  ::vipuser_proto::UserSession* _internal_mutable_session();
  public:

  // @@protoc_insertion_point(class_scope:vipuser_proto.BusinessRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_;
  ::vipuser_proto::UserSession* session_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vipuser_2eproto;
};
// -------------------------------------------------------------------

class BusinessResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vipuser_proto.BusinessResponse) */ {
 public:
  BusinessResponse();
  virtual ~BusinessResponse();

  BusinessResponse(const BusinessResponse& from);
  BusinessResponse(BusinessResponse&& from) noexcept
    : BusinessResponse() {
    *this = ::std::move(from);
  }

  inline BusinessResponse& operator=(const BusinessResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BusinessResponse& operator=(BusinessResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BusinessResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BusinessResponse* internal_default_instance() {
    return reinterpret_cast<const BusinessResponse*>(
               &_BusinessResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(BusinessResponse& a, BusinessResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BusinessResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BusinessResponse* New() const final {
    return CreateMaybeMessage<BusinessResponse>(nullptr);
  }

  BusinessResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BusinessResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BusinessResponse& from);
  void MergeFrom(const BusinessResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BusinessResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vipuser_proto.BusinessResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vipuser_2eproto);
    return ::descriptor_table_vipuser_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponseFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // bytes response = 2;
  void clear_response();
  const std::string& response() const;
  void set_response(const std::string& value);
  void set_response(std::string&& value);
  void set_response(const char* value);
  void set_response(const void* value, size_t size);
  std::string* mutable_response();
  std::string* release_response();
  void set_allocated_response(std::string* response);
  private:
  const std::string& _internal_response() const;
  void _internal_set_response(const std::string& value);
  std::string* _internal_mutable_response();
  public:

  // .vipuser_proto.Result result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::vipuser_proto::Result& result() const;
  ::vipuser_proto::Result* release_result();
  ::vipuser_proto::Result* mutable_result();
  void set_allocated_result(::vipuser_proto::Result* result);
  private:
  const ::vipuser_proto::Result& _internal_result() const;
  ::vipuser_proto::Result* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:vipuser_proto.BusinessResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr response_;
  ::vipuser_proto::Result* result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vipuser_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AccountInfo

// string userAlias = 1;
inline void AccountInfo::clear_useralias() {
  useralias_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AccountInfo::useralias() const {
  // @@protoc_insertion_point(field_get:vipuser_proto.AccountInfo.userAlias)
  return _internal_useralias();
}
inline void AccountInfo::set_useralias(const std::string& value) {
  _internal_set_useralias(value);
  // @@protoc_insertion_point(field_set:vipuser_proto.AccountInfo.userAlias)
}
inline std::string* AccountInfo::mutable_useralias() {
  // @@protoc_insertion_point(field_mutable:vipuser_proto.AccountInfo.userAlias)
  return _internal_mutable_useralias();
}
inline const std::string& AccountInfo::_internal_useralias() const {
  return useralias_.GetNoArena();
}
inline void AccountInfo::_internal_set_useralias(const std::string& value) {
  
  useralias_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AccountInfo::set_useralias(std::string&& value) {
  
  useralias_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vipuser_proto.AccountInfo.userAlias)
}
inline void AccountInfo::set_useralias(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  useralias_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vipuser_proto.AccountInfo.userAlias)
}
inline void AccountInfo::set_useralias(const char* value, size_t size) {
  
  useralias_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vipuser_proto.AccountInfo.userAlias)
}
inline std::string* AccountInfo::_internal_mutable_useralias() {
  
  return useralias_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AccountInfo::release_useralias() {
  // @@protoc_insertion_point(field_release:vipuser_proto.AccountInfo.userAlias)
  
  return useralias_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AccountInfo::set_allocated_useralias(std::string* useralias) {
  if (useralias != nullptr) {
    
  } else {
    
  }
  useralias_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), useralias);
  // @@protoc_insertion_point(field_set_allocated:vipuser_proto.AccountInfo.userAlias)
}

// string passwordSHA256 = 2;
inline void AccountInfo::clear_passwordsha256() {
  passwordsha256_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AccountInfo::passwordsha256() const {
  // @@protoc_insertion_point(field_get:vipuser_proto.AccountInfo.passwordSHA256)
  return _internal_passwordsha256();
}
inline void AccountInfo::set_passwordsha256(const std::string& value) {
  _internal_set_passwordsha256(value);
  // @@protoc_insertion_point(field_set:vipuser_proto.AccountInfo.passwordSHA256)
}
inline std::string* AccountInfo::mutable_passwordsha256() {
  // @@protoc_insertion_point(field_mutable:vipuser_proto.AccountInfo.passwordSHA256)
  return _internal_mutable_passwordsha256();
}
inline const std::string& AccountInfo::_internal_passwordsha256() const {
  return passwordsha256_.GetNoArena();
}
inline void AccountInfo::_internal_set_passwordsha256(const std::string& value) {
  
  passwordsha256_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AccountInfo::set_passwordsha256(std::string&& value) {
  
  passwordsha256_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vipuser_proto.AccountInfo.passwordSHA256)
}
inline void AccountInfo::set_passwordsha256(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  passwordsha256_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vipuser_proto.AccountInfo.passwordSHA256)
}
inline void AccountInfo::set_passwordsha256(const char* value, size_t size) {
  
  passwordsha256_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vipuser_proto.AccountInfo.passwordSHA256)
}
inline std::string* AccountInfo::_internal_mutable_passwordsha256() {
  
  return passwordsha256_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AccountInfo::release_passwordsha256() {
  // @@protoc_insertion_point(field_release:vipuser_proto.AccountInfo.passwordSHA256)
  
  return passwordsha256_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AccountInfo::set_allocated_passwordsha256(std::string* passwordsha256) {
  if (passwordsha256 != nullptr) {
    
  } else {
    
  }
  passwordsha256_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), passwordsha256);
  // @@protoc_insertion_point(field_set_allocated:vipuser_proto.AccountInfo.passwordSHA256)
}

// -------------------------------------------------------------------

// TokenInfo

// string uuid = 1;
inline void TokenInfo::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TokenInfo::uuid() const {
  // @@protoc_insertion_point(field_get:vipuser_proto.TokenInfo.uuid)
  return _internal_uuid();
}
inline void TokenInfo::set_uuid(const std::string& value) {
  _internal_set_uuid(value);
  // @@protoc_insertion_point(field_set:vipuser_proto.TokenInfo.uuid)
}
inline std::string* TokenInfo::mutable_uuid() {
  // @@protoc_insertion_point(field_mutable:vipuser_proto.TokenInfo.uuid)
  return _internal_mutable_uuid();
}
inline const std::string& TokenInfo::_internal_uuid() const {
  return uuid_.GetNoArena();
}
inline void TokenInfo::_internal_set_uuid(const std::string& value) {
  
  uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TokenInfo::set_uuid(std::string&& value) {
  
  uuid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vipuser_proto.TokenInfo.uuid)
}
inline void TokenInfo::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vipuser_proto.TokenInfo.uuid)
}
inline void TokenInfo::set_uuid(const char* value, size_t size) {
  
  uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vipuser_proto.TokenInfo.uuid)
}
inline std::string* TokenInfo::_internal_mutable_uuid() {
  
  return uuid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TokenInfo::release_uuid() {
  // @@protoc_insertion_point(field_release:vipuser_proto.TokenInfo.uuid)
  
  return uuid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TokenInfo::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:vipuser_proto.TokenInfo.uuid)
}

// string accessToken = 2;
inline void TokenInfo::clear_accesstoken() {
  accesstoken_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TokenInfo::accesstoken() const {
  // @@protoc_insertion_point(field_get:vipuser_proto.TokenInfo.accessToken)
  return _internal_accesstoken();
}
inline void TokenInfo::set_accesstoken(const std::string& value) {
  _internal_set_accesstoken(value);
  // @@protoc_insertion_point(field_set:vipuser_proto.TokenInfo.accessToken)
}
inline std::string* TokenInfo::mutable_accesstoken() {
  // @@protoc_insertion_point(field_mutable:vipuser_proto.TokenInfo.accessToken)
  return _internal_mutable_accesstoken();
}
inline const std::string& TokenInfo::_internal_accesstoken() const {
  return accesstoken_.GetNoArena();
}
inline void TokenInfo::_internal_set_accesstoken(const std::string& value) {
  
  accesstoken_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TokenInfo::set_accesstoken(std::string&& value) {
  
  accesstoken_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vipuser_proto.TokenInfo.accessToken)
}
inline void TokenInfo::set_accesstoken(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  accesstoken_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vipuser_proto.TokenInfo.accessToken)
}
inline void TokenInfo::set_accesstoken(const char* value, size_t size) {
  
  accesstoken_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vipuser_proto.TokenInfo.accessToken)
}
inline std::string* TokenInfo::_internal_mutable_accesstoken() {
  
  return accesstoken_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TokenInfo::release_accesstoken() {
  // @@protoc_insertion_point(field_release:vipuser_proto.TokenInfo.accessToken)
  
  return accesstoken_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TokenInfo::set_allocated_accesstoken(std::string* accesstoken) {
  if (accesstoken != nullptr) {
    
  } else {
    
  }
  accesstoken_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), accesstoken);
  // @@protoc_insertion_point(field_set_allocated:vipuser_proto.TokenInfo.accessToken)
}

// string refreshToken = 3;
inline void TokenInfo::clear_refreshtoken() {
  refreshtoken_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TokenInfo::refreshtoken() const {
  // @@protoc_insertion_point(field_get:vipuser_proto.TokenInfo.refreshToken)
  return _internal_refreshtoken();
}
inline void TokenInfo::set_refreshtoken(const std::string& value) {
  _internal_set_refreshtoken(value);
  // @@protoc_insertion_point(field_set:vipuser_proto.TokenInfo.refreshToken)
}
inline std::string* TokenInfo::mutable_refreshtoken() {
  // @@protoc_insertion_point(field_mutable:vipuser_proto.TokenInfo.refreshToken)
  return _internal_mutable_refreshtoken();
}
inline const std::string& TokenInfo::_internal_refreshtoken() const {
  return refreshtoken_.GetNoArena();
}
inline void TokenInfo::_internal_set_refreshtoken(const std::string& value) {
  
  refreshtoken_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TokenInfo::set_refreshtoken(std::string&& value) {
  
  refreshtoken_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vipuser_proto.TokenInfo.refreshToken)
}
inline void TokenInfo::set_refreshtoken(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  refreshtoken_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vipuser_proto.TokenInfo.refreshToken)
}
inline void TokenInfo::set_refreshtoken(const char* value, size_t size) {
  
  refreshtoken_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vipuser_proto.TokenInfo.refreshToken)
}
inline std::string* TokenInfo::_internal_mutable_refreshtoken() {
  
  return refreshtoken_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TokenInfo::release_refreshtoken() {
  // @@protoc_insertion_point(field_release:vipuser_proto.TokenInfo.refreshToken)
  
  return refreshtoken_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TokenInfo::set_allocated_refreshtoken(std::string* refreshtoken) {
  if (refreshtoken != nullptr) {
    
  } else {
    
  }
  refreshtoken_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), refreshtoken);
  // @@protoc_insertion_point(field_set_allocated:vipuser_proto.TokenInfo.refreshToken)
}

// -------------------------------------------------------------------

// Result

// int32 code = 1;
inline void Result::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Result::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Result::code() const {
  // @@protoc_insertion_point(field_get:vipuser_proto.Result.code)
  return _internal_code();
}
inline void Result::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void Result::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:vipuser_proto.Result.code)
}

// string message = 2;
inline void Result::clear_message() {
  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Result::message() const {
  // @@protoc_insertion_point(field_get:vipuser_proto.Result.message)
  return _internal_message();
}
inline void Result::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:vipuser_proto.Result.message)
}
inline std::string* Result::mutable_message() {
  // @@protoc_insertion_point(field_mutable:vipuser_proto.Result.message)
  return _internal_mutable_message();
}
inline const std::string& Result::_internal_message() const {
  return message_.GetNoArena();
}
inline void Result::_internal_set_message(const std::string& value) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Result::set_message(std::string&& value) {
  
  message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vipuser_proto.Result.message)
}
inline void Result::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vipuser_proto.Result.message)
}
inline void Result::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vipuser_proto.Result.message)
}
inline std::string* Result::_internal_mutable_message() {
  
  return message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Result::release_message() {
  // @@protoc_insertion_point(field_release:vipuser_proto.Result.message)
  
  return message_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Result::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:vipuser_proto.Result.message)
}

// -------------------------------------------------------------------

// CreateAccountRequest

// .vipuser_proto.AccountInfo accountInfo = 1;
inline bool CreateAccountRequest::_internal_has_accountinfo() const {
  return this != internal_default_instance() && accountinfo_ != nullptr;
}
inline bool CreateAccountRequest::has_accountinfo() const {
  return _internal_has_accountinfo();
}
inline void CreateAccountRequest::clear_accountinfo() {
  if (GetArenaNoVirtual() == nullptr && accountinfo_ != nullptr) {
    delete accountinfo_;
  }
  accountinfo_ = nullptr;
}
inline const ::vipuser_proto::AccountInfo& CreateAccountRequest::_internal_accountinfo() const {
  const ::vipuser_proto::AccountInfo* p = accountinfo_;
  return p != nullptr ? *p : *reinterpret_cast<const ::vipuser_proto::AccountInfo*>(
      &::vipuser_proto::_AccountInfo_default_instance_);
}
inline const ::vipuser_proto::AccountInfo& CreateAccountRequest::accountinfo() const {
  // @@protoc_insertion_point(field_get:vipuser_proto.CreateAccountRequest.accountInfo)
  return _internal_accountinfo();
}
inline ::vipuser_proto::AccountInfo* CreateAccountRequest::release_accountinfo() {
  // @@protoc_insertion_point(field_release:vipuser_proto.CreateAccountRequest.accountInfo)
  
  ::vipuser_proto::AccountInfo* temp = accountinfo_;
  accountinfo_ = nullptr;
  return temp;
}
inline ::vipuser_proto::AccountInfo* CreateAccountRequest::_internal_mutable_accountinfo() {
  
  if (accountinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::vipuser_proto::AccountInfo>(GetArenaNoVirtual());
    accountinfo_ = p;
  }
  return accountinfo_;
}
inline ::vipuser_proto::AccountInfo* CreateAccountRequest::mutable_accountinfo() {
  // @@protoc_insertion_point(field_mutable:vipuser_proto.CreateAccountRequest.accountInfo)
  return _internal_mutable_accountinfo();
}
inline void CreateAccountRequest::set_allocated_accountinfo(::vipuser_proto::AccountInfo* accountinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete accountinfo_;
  }
  if (accountinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      accountinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, accountinfo, submessage_arena);
    }
    
  } else {
    
  }
  accountinfo_ = accountinfo;
  // @@protoc_insertion_point(field_set_allocated:vipuser_proto.CreateAccountRequest.accountInfo)
}

// -------------------------------------------------------------------

// CreateAccountResponse

// .vipuser_proto.Result result = 1;
inline bool CreateAccountResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool CreateAccountResponse::has_result() const {
  return _internal_has_result();
}
inline void CreateAccountResponse::clear_result() {
  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::vipuser_proto::Result& CreateAccountResponse::_internal_result() const {
  const ::vipuser_proto::Result* p = result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::vipuser_proto::Result*>(
      &::vipuser_proto::_Result_default_instance_);
}
inline const ::vipuser_proto::Result& CreateAccountResponse::result() const {
  // @@protoc_insertion_point(field_get:vipuser_proto.CreateAccountResponse.result)
  return _internal_result();
}
inline ::vipuser_proto::Result* CreateAccountResponse::release_result() {
  // @@protoc_insertion_point(field_release:vipuser_proto.CreateAccountResponse.result)
  
  ::vipuser_proto::Result* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::vipuser_proto::Result* CreateAccountResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::vipuser_proto::Result>(GetArenaNoVirtual());
    result_ = p;
  }
  return result_;
}
inline ::vipuser_proto::Result* CreateAccountResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:vipuser_proto.CreateAccountResponse.result)
  return _internal_mutable_result();
}
inline void CreateAccountResponse::set_allocated_result(::vipuser_proto::Result* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:vipuser_proto.CreateAccountResponse.result)
}

// .vipuser_proto.TokenInfo tokenInfo = 2;
inline bool CreateAccountResponse::_internal_has_tokeninfo() const {
  return this != internal_default_instance() && tokeninfo_ != nullptr;
}
inline bool CreateAccountResponse::has_tokeninfo() const {
  return _internal_has_tokeninfo();
}
inline void CreateAccountResponse::clear_tokeninfo() {
  if (GetArenaNoVirtual() == nullptr && tokeninfo_ != nullptr) {
    delete tokeninfo_;
  }
  tokeninfo_ = nullptr;
}
inline const ::vipuser_proto::TokenInfo& CreateAccountResponse::_internal_tokeninfo() const {
  const ::vipuser_proto::TokenInfo* p = tokeninfo_;
  return p != nullptr ? *p : *reinterpret_cast<const ::vipuser_proto::TokenInfo*>(
      &::vipuser_proto::_TokenInfo_default_instance_);
}
inline const ::vipuser_proto::TokenInfo& CreateAccountResponse::tokeninfo() const {
  // @@protoc_insertion_point(field_get:vipuser_proto.CreateAccountResponse.tokenInfo)
  return _internal_tokeninfo();
}
inline ::vipuser_proto::TokenInfo* CreateAccountResponse::release_tokeninfo() {
  // @@protoc_insertion_point(field_release:vipuser_proto.CreateAccountResponse.tokenInfo)
  
  ::vipuser_proto::TokenInfo* temp = tokeninfo_;
  tokeninfo_ = nullptr;
  return temp;
}
inline ::vipuser_proto::TokenInfo* CreateAccountResponse::_internal_mutable_tokeninfo() {
  
  if (tokeninfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::vipuser_proto::TokenInfo>(GetArenaNoVirtual());
    tokeninfo_ = p;
  }
  return tokeninfo_;
}
inline ::vipuser_proto::TokenInfo* CreateAccountResponse::mutable_tokeninfo() {
  // @@protoc_insertion_point(field_mutable:vipuser_proto.CreateAccountResponse.tokenInfo)
  return _internal_mutable_tokeninfo();
}
inline void CreateAccountResponse::set_allocated_tokeninfo(::vipuser_proto::TokenInfo* tokeninfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete tokeninfo_;
  }
  if (tokeninfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      tokeninfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tokeninfo, submessage_arena);
    }
    
  } else {
    
  }
  tokeninfo_ = tokeninfo;
  // @@protoc_insertion_point(field_set_allocated:vipuser_proto.CreateAccountResponse.tokenInfo)
}

// -------------------------------------------------------------------

// LoginRequest

// .vipuser_proto.AccountInfo accountInfo = 1;
inline bool LoginRequest::_internal_has_accountinfo() const {
  return this != internal_default_instance() && accountinfo_ != nullptr;
}
inline bool LoginRequest::has_accountinfo() const {
  return _internal_has_accountinfo();
}
inline void LoginRequest::clear_accountinfo() {
  if (GetArenaNoVirtual() == nullptr && accountinfo_ != nullptr) {
    delete accountinfo_;
  }
  accountinfo_ = nullptr;
}
inline const ::vipuser_proto::AccountInfo& LoginRequest::_internal_accountinfo() const {
  const ::vipuser_proto::AccountInfo* p = accountinfo_;
  return p != nullptr ? *p : *reinterpret_cast<const ::vipuser_proto::AccountInfo*>(
      &::vipuser_proto::_AccountInfo_default_instance_);
}
inline const ::vipuser_proto::AccountInfo& LoginRequest::accountinfo() const {
  // @@protoc_insertion_point(field_get:vipuser_proto.LoginRequest.accountInfo)
  return _internal_accountinfo();
}
inline ::vipuser_proto::AccountInfo* LoginRequest::release_accountinfo() {
  // @@protoc_insertion_point(field_release:vipuser_proto.LoginRequest.accountInfo)
  
  ::vipuser_proto::AccountInfo* temp = accountinfo_;
  accountinfo_ = nullptr;
  return temp;
}
inline ::vipuser_proto::AccountInfo* LoginRequest::_internal_mutable_accountinfo() {
  
  if (accountinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::vipuser_proto::AccountInfo>(GetArenaNoVirtual());
    accountinfo_ = p;
  }
  return accountinfo_;
}
inline ::vipuser_proto::AccountInfo* LoginRequest::mutable_accountinfo() {
  // @@protoc_insertion_point(field_mutable:vipuser_proto.LoginRequest.accountInfo)
  return _internal_mutable_accountinfo();
}
inline void LoginRequest::set_allocated_accountinfo(::vipuser_proto::AccountInfo* accountinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete accountinfo_;
  }
  if (accountinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      accountinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, accountinfo, submessage_arena);
    }
    
  } else {
    
  }
  accountinfo_ = accountinfo;
  // @@protoc_insertion_point(field_set_allocated:vipuser_proto.LoginRequest.accountInfo)
}

// -------------------------------------------------------------------

// LoginResponse

// .vipuser_proto.Result result = 1;
inline bool LoginResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool LoginResponse::has_result() const {
  return _internal_has_result();
}
inline void LoginResponse::clear_result() {
  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::vipuser_proto::Result& LoginResponse::_internal_result() const {
  const ::vipuser_proto::Result* p = result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::vipuser_proto::Result*>(
      &::vipuser_proto::_Result_default_instance_);
}
inline const ::vipuser_proto::Result& LoginResponse::result() const {
  // @@protoc_insertion_point(field_get:vipuser_proto.LoginResponse.result)
  return _internal_result();
}
inline ::vipuser_proto::Result* LoginResponse::release_result() {
  // @@protoc_insertion_point(field_release:vipuser_proto.LoginResponse.result)
  
  ::vipuser_proto::Result* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::vipuser_proto::Result* LoginResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::vipuser_proto::Result>(GetArenaNoVirtual());
    result_ = p;
  }
  return result_;
}
inline ::vipuser_proto::Result* LoginResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:vipuser_proto.LoginResponse.result)
  return _internal_mutable_result();
}
inline void LoginResponse::set_allocated_result(::vipuser_proto::Result* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:vipuser_proto.LoginResponse.result)
}

// .vipuser_proto.TokenInfo tokenInfo = 2;
inline bool LoginResponse::_internal_has_tokeninfo() const {
  return this != internal_default_instance() && tokeninfo_ != nullptr;
}
inline bool LoginResponse::has_tokeninfo() const {
  return _internal_has_tokeninfo();
}
inline void LoginResponse::clear_tokeninfo() {
  if (GetArenaNoVirtual() == nullptr && tokeninfo_ != nullptr) {
    delete tokeninfo_;
  }
  tokeninfo_ = nullptr;
}
inline const ::vipuser_proto::TokenInfo& LoginResponse::_internal_tokeninfo() const {
  const ::vipuser_proto::TokenInfo* p = tokeninfo_;
  return p != nullptr ? *p : *reinterpret_cast<const ::vipuser_proto::TokenInfo*>(
      &::vipuser_proto::_TokenInfo_default_instance_);
}
inline const ::vipuser_proto::TokenInfo& LoginResponse::tokeninfo() const {
  // @@protoc_insertion_point(field_get:vipuser_proto.LoginResponse.tokenInfo)
  return _internal_tokeninfo();
}
inline ::vipuser_proto::TokenInfo* LoginResponse::release_tokeninfo() {
  // @@protoc_insertion_point(field_release:vipuser_proto.LoginResponse.tokenInfo)
  
  ::vipuser_proto::TokenInfo* temp = tokeninfo_;
  tokeninfo_ = nullptr;
  return temp;
}
inline ::vipuser_proto::TokenInfo* LoginResponse::_internal_mutable_tokeninfo() {
  
  if (tokeninfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::vipuser_proto::TokenInfo>(GetArenaNoVirtual());
    tokeninfo_ = p;
  }
  return tokeninfo_;
}
inline ::vipuser_proto::TokenInfo* LoginResponse::mutable_tokeninfo() {
  // @@protoc_insertion_point(field_mutable:vipuser_proto.LoginResponse.tokenInfo)
  return _internal_mutable_tokeninfo();
}
inline void LoginResponse::set_allocated_tokeninfo(::vipuser_proto::TokenInfo* tokeninfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete tokeninfo_;
  }
  if (tokeninfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      tokeninfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tokeninfo, submessage_arena);
    }
    
  } else {
    
  }
  tokeninfo_ = tokeninfo;
  // @@protoc_insertion_point(field_set_allocated:vipuser_proto.LoginResponse.tokenInfo)
}

// -------------------------------------------------------------------

// LogoutRequest

// string accessToken = 1;
inline void LogoutRequest::clear_accesstoken() {
  accesstoken_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LogoutRequest::accesstoken() const {
  // @@protoc_insertion_point(field_get:vipuser_proto.LogoutRequest.accessToken)
  return _internal_accesstoken();
}
inline void LogoutRequest::set_accesstoken(const std::string& value) {
  _internal_set_accesstoken(value);
  // @@protoc_insertion_point(field_set:vipuser_proto.LogoutRequest.accessToken)
}
inline std::string* LogoutRequest::mutable_accesstoken() {
  // @@protoc_insertion_point(field_mutable:vipuser_proto.LogoutRequest.accessToken)
  return _internal_mutable_accesstoken();
}
inline const std::string& LogoutRequest::_internal_accesstoken() const {
  return accesstoken_.GetNoArena();
}
inline void LogoutRequest::_internal_set_accesstoken(const std::string& value) {
  
  accesstoken_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LogoutRequest::set_accesstoken(std::string&& value) {
  
  accesstoken_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vipuser_proto.LogoutRequest.accessToken)
}
inline void LogoutRequest::set_accesstoken(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  accesstoken_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vipuser_proto.LogoutRequest.accessToken)
}
inline void LogoutRequest::set_accesstoken(const char* value, size_t size) {
  
  accesstoken_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vipuser_proto.LogoutRequest.accessToken)
}
inline std::string* LogoutRequest::_internal_mutable_accesstoken() {
  
  return accesstoken_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LogoutRequest::release_accesstoken() {
  // @@protoc_insertion_point(field_release:vipuser_proto.LogoutRequest.accessToken)
  
  return accesstoken_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LogoutRequest::set_allocated_accesstoken(std::string* accesstoken) {
  if (accesstoken != nullptr) {
    
  } else {
    
  }
  accesstoken_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), accesstoken);
  // @@protoc_insertion_point(field_set_allocated:vipuser_proto.LogoutRequest.accessToken)
}

// -------------------------------------------------------------------

// LogoutResponse

// .vipuser_proto.Result result = 1;
inline bool LogoutResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool LogoutResponse::has_result() const {
  return _internal_has_result();
}
inline void LogoutResponse::clear_result() {
  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::vipuser_proto::Result& LogoutResponse::_internal_result() const {
  const ::vipuser_proto::Result* p = result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::vipuser_proto::Result*>(
      &::vipuser_proto::_Result_default_instance_);
}
inline const ::vipuser_proto::Result& LogoutResponse::result() const {
  // @@protoc_insertion_point(field_get:vipuser_proto.LogoutResponse.result)
  return _internal_result();
}
inline ::vipuser_proto::Result* LogoutResponse::release_result() {
  // @@protoc_insertion_point(field_release:vipuser_proto.LogoutResponse.result)
  
  ::vipuser_proto::Result* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::vipuser_proto::Result* LogoutResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::vipuser_proto::Result>(GetArenaNoVirtual());
    result_ = p;
  }
  return result_;
}
inline ::vipuser_proto::Result* LogoutResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:vipuser_proto.LogoutResponse.result)
  return _internal_mutable_result();
}
inline void LogoutResponse::set_allocated_result(::vipuser_proto::Result* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:vipuser_proto.LogoutResponse.result)
}

// -------------------------------------------------------------------

// ReLoginRequest

// string refreshToken = 1;
inline void ReLoginRequest::clear_refreshtoken() {
  refreshtoken_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ReLoginRequest::refreshtoken() const {
  // @@protoc_insertion_point(field_get:vipuser_proto.ReLoginRequest.refreshToken)
  return _internal_refreshtoken();
}
inline void ReLoginRequest::set_refreshtoken(const std::string& value) {
  _internal_set_refreshtoken(value);
  // @@protoc_insertion_point(field_set:vipuser_proto.ReLoginRequest.refreshToken)
}
inline std::string* ReLoginRequest::mutable_refreshtoken() {
  // @@protoc_insertion_point(field_mutable:vipuser_proto.ReLoginRequest.refreshToken)
  return _internal_mutable_refreshtoken();
}
inline const std::string& ReLoginRequest::_internal_refreshtoken() const {
  return refreshtoken_.GetNoArena();
}
inline void ReLoginRequest::_internal_set_refreshtoken(const std::string& value) {
  
  refreshtoken_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ReLoginRequest::set_refreshtoken(std::string&& value) {
  
  refreshtoken_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vipuser_proto.ReLoginRequest.refreshToken)
}
inline void ReLoginRequest::set_refreshtoken(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  refreshtoken_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vipuser_proto.ReLoginRequest.refreshToken)
}
inline void ReLoginRequest::set_refreshtoken(const char* value, size_t size) {
  
  refreshtoken_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vipuser_proto.ReLoginRequest.refreshToken)
}
inline std::string* ReLoginRequest::_internal_mutable_refreshtoken() {
  
  return refreshtoken_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ReLoginRequest::release_refreshtoken() {
  // @@protoc_insertion_point(field_release:vipuser_proto.ReLoginRequest.refreshToken)
  
  return refreshtoken_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ReLoginRequest::set_allocated_refreshtoken(std::string* refreshtoken) {
  if (refreshtoken != nullptr) {
    
  } else {
    
  }
  refreshtoken_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), refreshtoken);
  // @@protoc_insertion_point(field_set_allocated:vipuser_proto.ReLoginRequest.refreshToken)
}

// -------------------------------------------------------------------

// ReLoginResponse

// .vipuser_proto.Result result = 1;
inline bool ReLoginResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool ReLoginResponse::has_result() const {
  return _internal_has_result();
}
inline void ReLoginResponse::clear_result() {
  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::vipuser_proto::Result& ReLoginResponse::_internal_result() const {
  const ::vipuser_proto::Result* p = result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::vipuser_proto::Result*>(
      &::vipuser_proto::_Result_default_instance_);
}
inline const ::vipuser_proto::Result& ReLoginResponse::result() const {
  // @@protoc_insertion_point(field_get:vipuser_proto.ReLoginResponse.result)
  return _internal_result();
}
inline ::vipuser_proto::Result* ReLoginResponse::release_result() {
  // @@protoc_insertion_point(field_release:vipuser_proto.ReLoginResponse.result)
  
  ::vipuser_proto::Result* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::vipuser_proto::Result* ReLoginResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::vipuser_proto::Result>(GetArenaNoVirtual());
    result_ = p;
  }
  return result_;
}
inline ::vipuser_proto::Result* ReLoginResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:vipuser_proto.ReLoginResponse.result)
  return _internal_mutable_result();
}
inline void ReLoginResponse::set_allocated_result(::vipuser_proto::Result* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:vipuser_proto.ReLoginResponse.result)
}

// .vipuser_proto.TokenInfo tokenInfo = 2;
inline bool ReLoginResponse::_internal_has_tokeninfo() const {
  return this != internal_default_instance() && tokeninfo_ != nullptr;
}
inline bool ReLoginResponse::has_tokeninfo() const {
  return _internal_has_tokeninfo();
}
inline void ReLoginResponse::clear_tokeninfo() {
  if (GetArenaNoVirtual() == nullptr && tokeninfo_ != nullptr) {
    delete tokeninfo_;
  }
  tokeninfo_ = nullptr;
}
inline const ::vipuser_proto::TokenInfo& ReLoginResponse::_internal_tokeninfo() const {
  const ::vipuser_proto::TokenInfo* p = tokeninfo_;
  return p != nullptr ? *p : *reinterpret_cast<const ::vipuser_proto::TokenInfo*>(
      &::vipuser_proto::_TokenInfo_default_instance_);
}
inline const ::vipuser_proto::TokenInfo& ReLoginResponse::tokeninfo() const {
  // @@protoc_insertion_point(field_get:vipuser_proto.ReLoginResponse.tokenInfo)
  return _internal_tokeninfo();
}
inline ::vipuser_proto::TokenInfo* ReLoginResponse::release_tokeninfo() {
  // @@protoc_insertion_point(field_release:vipuser_proto.ReLoginResponse.tokenInfo)
  
  ::vipuser_proto::TokenInfo* temp = tokeninfo_;
  tokeninfo_ = nullptr;
  return temp;
}
inline ::vipuser_proto::TokenInfo* ReLoginResponse::_internal_mutable_tokeninfo() {
  
  if (tokeninfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::vipuser_proto::TokenInfo>(GetArenaNoVirtual());
    tokeninfo_ = p;
  }
  return tokeninfo_;
}
inline ::vipuser_proto::TokenInfo* ReLoginResponse::mutable_tokeninfo() {
  // @@protoc_insertion_point(field_mutable:vipuser_proto.ReLoginResponse.tokenInfo)
  return _internal_mutable_tokeninfo();
}
inline void ReLoginResponse::set_allocated_tokeninfo(::vipuser_proto::TokenInfo* tokeninfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete tokeninfo_;
  }
  if (tokeninfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      tokeninfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tokeninfo, submessage_arena);
    }
    
  } else {
    
  }
  tokeninfo_ = tokeninfo;
  // @@protoc_insertion_point(field_set_allocated:vipuser_proto.ReLoginResponse.tokenInfo)
}

// -------------------------------------------------------------------

// UserSession

// string uuid = 1;
inline void UserSession::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UserSession::uuid() const {
  // @@protoc_insertion_point(field_get:vipuser_proto.UserSession.uuid)
  return _internal_uuid();
}
inline void UserSession::set_uuid(const std::string& value) {
  _internal_set_uuid(value);
  // @@protoc_insertion_point(field_set:vipuser_proto.UserSession.uuid)
}
inline std::string* UserSession::mutable_uuid() {
  // @@protoc_insertion_point(field_mutable:vipuser_proto.UserSession.uuid)
  return _internal_mutable_uuid();
}
inline const std::string& UserSession::_internal_uuid() const {
  return uuid_.GetNoArena();
}
inline void UserSession::_internal_set_uuid(const std::string& value) {
  
  uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UserSession::set_uuid(std::string&& value) {
  
  uuid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vipuser_proto.UserSession.uuid)
}
inline void UserSession::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vipuser_proto.UserSession.uuid)
}
inline void UserSession::set_uuid(const char* value, size_t size) {
  
  uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vipuser_proto.UserSession.uuid)
}
inline std::string* UserSession::_internal_mutable_uuid() {
  
  return uuid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UserSession::release_uuid() {
  // @@protoc_insertion_point(field_release:vipuser_proto.UserSession.uuid)
  
  return uuid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UserSession::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:vipuser_proto.UserSession.uuid)
}

// string accessToken = 2;
inline void UserSession::clear_accesstoken() {
  accesstoken_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UserSession::accesstoken() const {
  // @@protoc_insertion_point(field_get:vipuser_proto.UserSession.accessToken)
  return _internal_accesstoken();
}
inline void UserSession::set_accesstoken(const std::string& value) {
  _internal_set_accesstoken(value);
  // @@protoc_insertion_point(field_set:vipuser_proto.UserSession.accessToken)
}
inline std::string* UserSession::mutable_accesstoken() {
  // @@protoc_insertion_point(field_mutable:vipuser_proto.UserSession.accessToken)
  return _internal_mutable_accesstoken();
}
inline const std::string& UserSession::_internal_accesstoken() const {
  return accesstoken_.GetNoArena();
}
inline void UserSession::_internal_set_accesstoken(const std::string& value) {
  
  accesstoken_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UserSession::set_accesstoken(std::string&& value) {
  
  accesstoken_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vipuser_proto.UserSession.accessToken)
}
inline void UserSession::set_accesstoken(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  accesstoken_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vipuser_proto.UserSession.accessToken)
}
inline void UserSession::set_accesstoken(const char* value, size_t size) {
  
  accesstoken_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vipuser_proto.UserSession.accessToken)
}
inline std::string* UserSession::_internal_mutable_accesstoken() {
  
  return accesstoken_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UserSession::release_accesstoken() {
  // @@protoc_insertion_point(field_release:vipuser_proto.UserSession.accessToken)
  
  return accesstoken_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UserSession::set_allocated_accesstoken(std::string* accesstoken) {
  if (accesstoken != nullptr) {
    
  } else {
    
  }
  accesstoken_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), accesstoken);
  // @@protoc_insertion_point(field_set_allocated:vipuser_proto.UserSession.accessToken)
}

// -------------------------------------------------------------------

// BusinessRequest

// .vipuser_proto.UserSession session = 1;
inline bool BusinessRequest::_internal_has_session() const {
  return this != internal_default_instance() && session_ != nullptr;
}
inline bool BusinessRequest::has_session() const {
  return _internal_has_session();
}
inline void BusinessRequest::clear_session() {
  if (GetArenaNoVirtual() == nullptr && session_ != nullptr) {
    delete session_;
  }
  session_ = nullptr;
}
inline const ::vipuser_proto::UserSession& BusinessRequest::_internal_session() const {
  const ::vipuser_proto::UserSession* p = session_;
  return p != nullptr ? *p : *reinterpret_cast<const ::vipuser_proto::UserSession*>(
      &::vipuser_proto::_UserSession_default_instance_);
}
inline const ::vipuser_proto::UserSession& BusinessRequest::session() const {
  // @@protoc_insertion_point(field_get:vipuser_proto.BusinessRequest.session)
  return _internal_session();
}
inline ::vipuser_proto::UserSession* BusinessRequest::release_session() {
  // @@protoc_insertion_point(field_release:vipuser_proto.BusinessRequest.session)
  
  ::vipuser_proto::UserSession* temp = session_;
  session_ = nullptr;
  return temp;
}
inline ::vipuser_proto::UserSession* BusinessRequest::_internal_mutable_session() {
  
  if (session_ == nullptr) {
    auto* p = CreateMaybeMessage<::vipuser_proto::UserSession>(GetArenaNoVirtual());
    session_ = p;
  }
  return session_;
}
inline ::vipuser_proto::UserSession* BusinessRequest::mutable_session() {
  // @@protoc_insertion_point(field_mutable:vipuser_proto.BusinessRequest.session)
  return _internal_mutable_session();
}
inline void BusinessRequest::set_allocated_session(::vipuser_proto::UserSession* session) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete session_;
  }
  if (session) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      session = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, session, submessage_arena);
    }
    
  } else {
    
  }
  session_ = session;
  // @@protoc_insertion_point(field_set_allocated:vipuser_proto.BusinessRequest.session)
}

// bytes request = 2;
inline void BusinessRequest::clear_request() {
  request_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BusinessRequest::request() const {
  // @@protoc_insertion_point(field_get:vipuser_proto.BusinessRequest.request)
  return _internal_request();
}
inline void BusinessRequest::set_request(const std::string& value) {
  _internal_set_request(value);
  // @@protoc_insertion_point(field_set:vipuser_proto.BusinessRequest.request)
}
inline std::string* BusinessRequest::mutable_request() {
  // @@protoc_insertion_point(field_mutable:vipuser_proto.BusinessRequest.request)
  return _internal_mutable_request();
}
inline const std::string& BusinessRequest::_internal_request() const {
  return request_.GetNoArena();
}
inline void BusinessRequest::_internal_set_request(const std::string& value) {
  
  request_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BusinessRequest::set_request(std::string&& value) {
  
  request_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vipuser_proto.BusinessRequest.request)
}
inline void BusinessRequest::set_request(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  request_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vipuser_proto.BusinessRequest.request)
}
inline void BusinessRequest::set_request(const void* value, size_t size) {
  
  request_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vipuser_proto.BusinessRequest.request)
}
inline std::string* BusinessRequest::_internal_mutable_request() {
  
  return request_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BusinessRequest::release_request() {
  // @@protoc_insertion_point(field_release:vipuser_proto.BusinessRequest.request)
  
  return request_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BusinessRequest::set_allocated_request(std::string* request) {
  if (request != nullptr) {
    
  } else {
    
  }
  request_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request);
  // @@protoc_insertion_point(field_set_allocated:vipuser_proto.BusinessRequest.request)
}

// -------------------------------------------------------------------

// BusinessResponse

// .vipuser_proto.Result result = 1;
inline bool BusinessResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool BusinessResponse::has_result() const {
  return _internal_has_result();
}
inline void BusinessResponse::clear_result() {
  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::vipuser_proto::Result& BusinessResponse::_internal_result() const {
  const ::vipuser_proto::Result* p = result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::vipuser_proto::Result*>(
      &::vipuser_proto::_Result_default_instance_);
}
inline const ::vipuser_proto::Result& BusinessResponse::result() const {
  // @@protoc_insertion_point(field_get:vipuser_proto.BusinessResponse.result)
  return _internal_result();
}
inline ::vipuser_proto::Result* BusinessResponse::release_result() {
  // @@protoc_insertion_point(field_release:vipuser_proto.BusinessResponse.result)
  
  ::vipuser_proto::Result* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::vipuser_proto::Result* BusinessResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::vipuser_proto::Result>(GetArenaNoVirtual());
    result_ = p;
  }
  return result_;
}
inline ::vipuser_proto::Result* BusinessResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:vipuser_proto.BusinessResponse.result)
  return _internal_mutable_result();
}
inline void BusinessResponse::set_allocated_result(::vipuser_proto::Result* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:vipuser_proto.BusinessResponse.result)
}

// bytes response = 2;
inline void BusinessResponse::clear_response() {
  response_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BusinessResponse::response() const {
  // @@protoc_insertion_point(field_get:vipuser_proto.BusinessResponse.response)
  return _internal_response();
}
inline void BusinessResponse::set_response(const std::string& value) {
  _internal_set_response(value);
  // @@protoc_insertion_point(field_set:vipuser_proto.BusinessResponse.response)
}
inline std::string* BusinessResponse::mutable_response() {
  // @@protoc_insertion_point(field_mutable:vipuser_proto.BusinessResponse.response)
  return _internal_mutable_response();
}
inline const std::string& BusinessResponse::_internal_response() const {
  return response_.GetNoArena();
}
inline void BusinessResponse::_internal_set_response(const std::string& value) {
  
  response_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BusinessResponse::set_response(std::string&& value) {
  
  response_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:vipuser_proto.BusinessResponse.response)
}
inline void BusinessResponse::set_response(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  response_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:vipuser_proto.BusinessResponse.response)
}
inline void BusinessResponse::set_response(const void* value, size_t size) {
  
  response_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:vipuser_proto.BusinessResponse.response)
}
inline std::string* BusinessResponse::_internal_mutable_response() {
  
  return response_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BusinessResponse::release_response() {
  // @@protoc_insertion_point(field_release:vipuser_proto.BusinessResponse.response)
  
  return response_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BusinessResponse::set_allocated_response(std::string* response) {
  if (response != nullptr) {
    
  } else {
    
  }
  response_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), response);
  // @@protoc_insertion_point(field_set_allocated:vipuser_proto.BusinessResponse.response)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace vipuser_proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_vipuser_2eproto
