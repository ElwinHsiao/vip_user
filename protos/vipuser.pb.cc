// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vipuser.proto

#include "vipuser.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_vipuser_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AccountInfo_vipuser_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vipuser_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReplyResult_vipuser_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vipuser_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TokenInfo_vipuser_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vipuser_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserSession_vipuser_2eproto;
namespace vipuser {
class AccountInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AccountInfo> _instance;
} _AccountInfo_default_instance_;
class TokenInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TokenInfo> _instance;
} _TokenInfo_default_instance_;
class ReplyResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReplyResult> _instance;
} _ReplyResult_default_instance_;
class CreateAccountRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateAccountRequest> _instance;
} _CreateAccountRequest_default_instance_;
class CreateAccountReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateAccountReply> _instance;
} _CreateAccountReply_default_instance_;
class LoginRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoginRequest> _instance;
} _LoginRequest_default_instance_;
class LoginReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoginReply> _instance;
} _LoginReply_default_instance_;
class LogoutRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LogoutRequest> _instance;
} _LogoutRequest_default_instance_;
class LogoutReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LogoutReply> _instance;
} _LogoutReply_default_instance_;
class ReLoginRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReLoginRequest> _instance;
} _ReLoginRequest_default_instance_;
class ReLoginReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReLoginReply> _instance;
} _ReLoginReply_default_instance_;
class UserSessionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserSession> _instance;
} _UserSession_default_instance_;
class BusinessRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BusinessRequest> _instance;
} _BusinessRequest_default_instance_;
class BusinessReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BusinessReply> _instance;
} _BusinessReply_default_instance_;
}  // namespace vipuser
static void InitDefaultsscc_info_AccountInfo_vipuser_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vipuser::_AccountInfo_default_instance_;
    new (ptr) ::vipuser::AccountInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vipuser::AccountInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AccountInfo_vipuser_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AccountInfo_vipuser_2eproto}, {}};

static void InitDefaultsscc_info_BusinessReply_vipuser_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vipuser::_BusinessReply_default_instance_;
    new (ptr) ::vipuser::BusinessReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vipuser::BusinessReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BusinessReply_vipuser_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_BusinessReply_vipuser_2eproto}, {
      &scc_info_ReplyResult_vipuser_2eproto.base,}};

static void InitDefaultsscc_info_BusinessRequest_vipuser_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vipuser::_BusinessRequest_default_instance_;
    new (ptr) ::vipuser::BusinessRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vipuser::BusinessRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BusinessRequest_vipuser_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_BusinessRequest_vipuser_2eproto}, {
      &scc_info_UserSession_vipuser_2eproto.base,}};

static void InitDefaultsscc_info_CreateAccountReply_vipuser_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vipuser::_CreateAccountReply_default_instance_;
    new (ptr) ::vipuser::CreateAccountReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vipuser::CreateAccountReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CreateAccountReply_vipuser_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_CreateAccountReply_vipuser_2eproto}, {
      &scc_info_ReplyResult_vipuser_2eproto.base,
      &scc_info_TokenInfo_vipuser_2eproto.base,}};

static void InitDefaultsscc_info_CreateAccountRequest_vipuser_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vipuser::_CreateAccountRequest_default_instance_;
    new (ptr) ::vipuser::CreateAccountRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vipuser::CreateAccountRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CreateAccountRequest_vipuser_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CreateAccountRequest_vipuser_2eproto}, {
      &scc_info_AccountInfo_vipuser_2eproto.base,}};

static void InitDefaultsscc_info_LoginReply_vipuser_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vipuser::_LoginReply_default_instance_;
    new (ptr) ::vipuser::LoginReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vipuser::LoginReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LoginReply_vipuser_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_LoginReply_vipuser_2eproto}, {
      &scc_info_ReplyResult_vipuser_2eproto.base,
      &scc_info_TokenInfo_vipuser_2eproto.base,}};

static void InitDefaultsscc_info_LoginRequest_vipuser_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vipuser::_LoginRequest_default_instance_;
    new (ptr) ::vipuser::LoginRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vipuser::LoginRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LoginRequest_vipuser_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LoginRequest_vipuser_2eproto}, {
      &scc_info_AccountInfo_vipuser_2eproto.base,}};

static void InitDefaultsscc_info_LogoutReply_vipuser_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vipuser::_LogoutReply_default_instance_;
    new (ptr) ::vipuser::LogoutReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vipuser::LogoutReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LogoutReply_vipuser_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LogoutReply_vipuser_2eproto}, {
      &scc_info_ReplyResult_vipuser_2eproto.base,}};

static void InitDefaultsscc_info_LogoutRequest_vipuser_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vipuser::_LogoutRequest_default_instance_;
    new (ptr) ::vipuser::LogoutRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vipuser::LogoutRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LogoutRequest_vipuser_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LogoutRequest_vipuser_2eproto}, {}};

static void InitDefaultsscc_info_ReLoginReply_vipuser_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vipuser::_ReLoginReply_default_instance_;
    new (ptr) ::vipuser::ReLoginReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vipuser::ReLoginReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ReLoginReply_vipuser_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ReLoginReply_vipuser_2eproto}, {
      &scc_info_ReplyResult_vipuser_2eproto.base,
      &scc_info_TokenInfo_vipuser_2eproto.base,}};

static void InitDefaultsscc_info_ReLoginRequest_vipuser_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vipuser::_ReLoginRequest_default_instance_;
    new (ptr) ::vipuser::ReLoginRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vipuser::ReLoginRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReLoginRequest_vipuser_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ReLoginRequest_vipuser_2eproto}, {}};

static void InitDefaultsscc_info_ReplyResult_vipuser_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vipuser::_ReplyResult_default_instance_;
    new (ptr) ::vipuser::ReplyResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vipuser::ReplyResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReplyResult_vipuser_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ReplyResult_vipuser_2eproto}, {}};

static void InitDefaultsscc_info_TokenInfo_vipuser_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vipuser::_TokenInfo_default_instance_;
    new (ptr) ::vipuser::TokenInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vipuser::TokenInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TokenInfo_vipuser_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TokenInfo_vipuser_2eproto}, {}};

static void InitDefaultsscc_info_UserSession_vipuser_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vipuser::_UserSession_default_instance_;
    new (ptr) ::vipuser::UserSession();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vipuser::UserSession::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserSession_vipuser_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UserSession_vipuser_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_vipuser_2eproto[14];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_vipuser_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_vipuser_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_vipuser_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vipuser::AccountInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vipuser::AccountInfo, useralias_),
  PROTOBUF_FIELD_OFFSET(::vipuser::AccountInfo, passwordsha256_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vipuser::TokenInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vipuser::TokenInfo, uuid_),
  PROTOBUF_FIELD_OFFSET(::vipuser::TokenInfo, accesstoken_),
  PROTOBUF_FIELD_OFFSET(::vipuser::TokenInfo, refreshtoken_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vipuser::ReplyResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vipuser::ReplyResult, result_),
  PROTOBUF_FIELD_OFFSET(::vipuser::ReplyResult, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vipuser::CreateAccountRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vipuser::CreateAccountRequest, accountinfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vipuser::CreateAccountReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vipuser::CreateAccountReply, result_),
  PROTOBUF_FIELD_OFFSET(::vipuser::CreateAccountReply, tokeninfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vipuser::LoginRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vipuser::LoginRequest, accountinfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vipuser::LoginReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vipuser::LoginReply, result_),
  PROTOBUF_FIELD_OFFSET(::vipuser::LoginReply, tokeninfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vipuser::LogoutRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vipuser::LogoutRequest, accesstoken_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vipuser::LogoutReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vipuser::LogoutReply, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vipuser::ReLoginRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vipuser::ReLoginRequest, refreshtoken_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vipuser::ReLoginReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vipuser::ReLoginReply, result_),
  PROTOBUF_FIELD_OFFSET(::vipuser::ReLoginReply, tokeninfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vipuser::UserSession, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vipuser::UserSession, uuid_),
  PROTOBUF_FIELD_OFFSET(::vipuser::UserSession, accesstoken_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vipuser::BusinessRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vipuser::BusinessRequest, session_),
  PROTOBUF_FIELD_OFFSET(::vipuser::BusinessRequest, params_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vipuser::BusinessReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vipuser::BusinessReply, result_),
  PROTOBUF_FIELD_OFFSET(::vipuser::BusinessReply, data_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::vipuser::AccountInfo)},
  { 7, -1, sizeof(::vipuser::TokenInfo)},
  { 15, -1, sizeof(::vipuser::ReplyResult)},
  { 22, -1, sizeof(::vipuser::CreateAccountRequest)},
  { 28, -1, sizeof(::vipuser::CreateAccountReply)},
  { 35, -1, sizeof(::vipuser::LoginRequest)},
  { 41, -1, sizeof(::vipuser::LoginReply)},
  { 48, -1, sizeof(::vipuser::LogoutRequest)},
  { 54, -1, sizeof(::vipuser::LogoutReply)},
  { 60, -1, sizeof(::vipuser::ReLoginRequest)},
  { 66, -1, sizeof(::vipuser::ReLoginReply)},
  { 73, -1, sizeof(::vipuser::UserSession)},
  { 80, -1, sizeof(::vipuser::BusinessRequest)},
  { 87, -1, sizeof(::vipuser::BusinessReply)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vipuser::_AccountInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vipuser::_TokenInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vipuser::_ReplyResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vipuser::_CreateAccountRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vipuser::_CreateAccountReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vipuser::_LoginRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vipuser::_LoginReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vipuser::_LogoutRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vipuser::_LogoutReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vipuser::_ReLoginRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vipuser::_ReLoginReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vipuser::_UserSession_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vipuser::_BusinessRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vipuser::_BusinessReply_default_instance_),
};

const char descriptor_table_protodef_vipuser_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rvipuser.proto\022\007vipuser\"8\n\013AccountInfo\022"
  "\021\n\tuserAlias\030\001 \001(\t\022\026\n\016passwordSHA256\030\002 \001"
  "(\t\"D\n\tTokenInfo\022\014\n\004uuid\030\001 \001(\t\022\023\n\013accessT"
  "oken\030\002 \001(\t\022\024\n\014refreshToken\030\003 \001(\t\".\n\013Repl"
  "yResult\022\016\n\006result\030\001 \001(\005\022\017\n\007message\030\002 \001(\t"
  "\"A\n\024CreateAccountRequest\022)\n\013accountInfo\030"
  "\001 \001(\0132\024.vipuser.AccountInfo\"a\n\022CreateAcc"
  "ountReply\022$\n\006result\030\001 \001(\0132\024.vipuser.Repl"
  "yResult\022%\n\ttokenInfo\030\002 \001(\0132\022.vipuser.Tok"
  "enInfo\"9\n\014LoginRequest\022)\n\013accountInfo\030\001 "
  "\001(\0132\024.vipuser.AccountInfo\"Y\n\nLoginReply\022"
  "$\n\006result\030\001 \001(\0132\024.vipuser.ReplyResult\022%\n"
  "\ttokenInfo\030\002 \001(\0132\022.vipuser.TokenInfo\"$\n\r"
  "LogoutRequest\022\023\n\013accessToken\030\001 \001(\t\"3\n\013Lo"
  "goutReply\022$\n\006result\030\001 \001(\0132\024.vipuser.Repl"
  "yResult\"&\n\016ReLoginRequest\022\024\n\014refreshToke"
  "n\030\001 \001(\t\"[\n\014ReLoginReply\022$\n\006result\030\001 \001(\0132"
  "\024.vipuser.ReplyResult\022%\n\ttokenInfo\030\002 \001(\013"
  "2\022.vipuser.TokenInfo\"0\n\013UserSession\022\014\n\004u"
  "uid\030\001 \001(\t\022\023\n\013accessToken\030\002 \001(\t\"H\n\017Busine"
  "ssRequest\022%\n\007session\030\001 \001(\0132\024.vipuser.Use"
  "rSession\022\016\n\006params\030\002 \001(\t\"C\n\rBusinessRepl"
  "y\022$\n\006result\030\001 \001(\0132\024.vipuser.ReplyResult\022"
  "\014\n\004data\030\002 \001(\t2\214\002\n\016AccountService\022L\n\014Crea"
  "teAcount\022\035.vipuser.CreateAccountRequest\032"
  "\033.vipuser.CreateAccountReply\"\000\0225\n\005Login\022"
  "\025.vipuser.LoginRequest\032\023.vipuser.LoginRe"
  "ply\"\000\0228\n\006Logout\022\026.vipuser.LogoutRequest\032"
  "\024.vipuser.LogoutReply\"\000\022;\n\007ReLogin\022\027.vip"
  "user.ReLoginRequest\032\025.vipuser.ReLoginRep"
  "ly\"\0002S\n\017BusinessService\022@\n\nDoBusiness\022\030."
  "vipuser.BusinessRequest\032\026.vipuser.Busine"
  "ssReply\"\000B6\n\033io.grpc.examples.helloworld"
  "B\017HelloWorldProtoP\001\242\002\003HLWb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_vipuser_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_vipuser_2eproto_sccs[14] = {
  &scc_info_AccountInfo_vipuser_2eproto.base,
  &scc_info_BusinessReply_vipuser_2eproto.base,
  &scc_info_BusinessRequest_vipuser_2eproto.base,
  &scc_info_CreateAccountReply_vipuser_2eproto.base,
  &scc_info_CreateAccountRequest_vipuser_2eproto.base,
  &scc_info_LoginReply_vipuser_2eproto.base,
  &scc_info_LoginRequest_vipuser_2eproto.base,
  &scc_info_LogoutReply_vipuser_2eproto.base,
  &scc_info_LogoutRequest_vipuser_2eproto.base,
  &scc_info_ReLoginReply_vipuser_2eproto.base,
  &scc_info_ReLoginRequest_vipuser_2eproto.base,
  &scc_info_ReplyResult_vipuser_2eproto.base,
  &scc_info_TokenInfo_vipuser_2eproto.base,
  &scc_info_UserSession_vipuser_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_vipuser_2eproto_once;
static bool descriptor_table_vipuser_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_vipuser_2eproto = {
  &descriptor_table_vipuser_2eproto_initialized, descriptor_table_protodef_vipuser_2eproto, "vipuser.proto", 1353,
  &descriptor_table_vipuser_2eproto_once, descriptor_table_vipuser_2eproto_sccs, descriptor_table_vipuser_2eproto_deps, 14, 0,
  schemas, file_default_instances, TableStruct_vipuser_2eproto::offsets,
  file_level_metadata_vipuser_2eproto, 14, file_level_enum_descriptors_vipuser_2eproto, file_level_service_descriptors_vipuser_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_vipuser_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_vipuser_2eproto), true);
namespace vipuser {

// ===================================================================

void AccountInfo::InitAsDefaultInstance() {
}
class AccountInfo::_Internal {
 public:
};

AccountInfo::AccountInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vipuser.AccountInfo)
}
AccountInfo::AccountInfo(const AccountInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  useralias_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_useralias().empty()) {
    useralias_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.useralias_);
  }
  passwordsha256_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_passwordsha256().empty()) {
    passwordsha256_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.passwordsha256_);
  }
  // @@protoc_insertion_point(copy_constructor:vipuser.AccountInfo)
}

void AccountInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AccountInfo_vipuser_2eproto.base);
  useralias_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  passwordsha256_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AccountInfo::~AccountInfo() {
  // @@protoc_insertion_point(destructor:vipuser.AccountInfo)
  SharedDtor();
}

void AccountInfo::SharedDtor() {
  useralias_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  passwordsha256_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AccountInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AccountInfo& AccountInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AccountInfo_vipuser_2eproto.base);
  return *internal_default_instance();
}


void AccountInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:vipuser.AccountInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  useralias_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  passwordsha256_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* AccountInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string userAlias = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_useralias();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vipuser.AccountInfo.userAlias"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string passwordSHA256 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_passwordsha256();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vipuser.AccountInfo.passwordSHA256"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AccountInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vipuser.AccountInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string userAlias = 1;
  if (this->useralias().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_useralias().data(), static_cast<int>(this->_internal_useralias().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vipuser.AccountInfo.userAlias");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_useralias(), target);
  }

  // string passwordSHA256 = 2;
  if (this->passwordsha256().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_passwordsha256().data(), static_cast<int>(this->_internal_passwordsha256().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vipuser.AccountInfo.passwordSHA256");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_passwordsha256(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vipuser.AccountInfo)
  return target;
}

size_t AccountInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vipuser.AccountInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string userAlias = 1;
  if (this->useralias().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_useralias());
  }

  // string passwordSHA256 = 2;
  if (this->passwordsha256().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_passwordsha256());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccountInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vipuser.AccountInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const AccountInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AccountInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vipuser.AccountInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vipuser.AccountInfo)
    MergeFrom(*source);
  }
}

void AccountInfo::MergeFrom(const AccountInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vipuser.AccountInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.useralias().size() > 0) {

    useralias_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.useralias_);
  }
  if (from.passwordsha256().size() > 0) {

    passwordsha256_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.passwordsha256_);
  }
}

void AccountInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vipuser.AccountInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountInfo::CopyFrom(const AccountInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vipuser.AccountInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountInfo::IsInitialized() const {
  return true;
}

void AccountInfo::InternalSwap(AccountInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  useralias_.Swap(&other->useralias_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  passwordsha256_.Swap(&other->passwordsha256_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata AccountInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TokenInfo::InitAsDefaultInstance() {
}
class TokenInfo::_Internal {
 public:
};

TokenInfo::TokenInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vipuser.TokenInfo)
}
TokenInfo::TokenInfo(const TokenInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_uuid().empty()) {
    uuid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
  accesstoken_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_accesstoken().empty()) {
    accesstoken_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.accesstoken_);
  }
  refreshtoken_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_refreshtoken().empty()) {
    refreshtoken_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.refreshtoken_);
  }
  // @@protoc_insertion_point(copy_constructor:vipuser.TokenInfo)
}

void TokenInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TokenInfo_vipuser_2eproto.base);
  uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  accesstoken_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  refreshtoken_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TokenInfo::~TokenInfo() {
  // @@protoc_insertion_point(destructor:vipuser.TokenInfo)
  SharedDtor();
}

void TokenInfo::SharedDtor() {
  uuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  accesstoken_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  refreshtoken_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TokenInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TokenInfo& TokenInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TokenInfo_vipuser_2eproto.base);
  return *internal_default_instance();
}


void TokenInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:vipuser.TokenInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uuid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  accesstoken_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  refreshtoken_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* TokenInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string uuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_uuid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vipuser.TokenInfo.uuid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string accessToken = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_accesstoken();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vipuser.TokenInfo.accessToken"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string refreshToken = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_refreshtoken();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vipuser.TokenInfo.refreshToken"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TokenInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vipuser.TokenInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string uuid = 1;
  if (this->uuid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uuid().data(), static_cast<int>(this->_internal_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vipuser.TokenInfo.uuid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_uuid(), target);
  }

  // string accessToken = 2;
  if (this->accesstoken().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_accesstoken().data(), static_cast<int>(this->_internal_accesstoken().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vipuser.TokenInfo.accessToken");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_accesstoken(), target);
  }

  // string refreshToken = 3;
  if (this->refreshtoken().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_refreshtoken().data(), static_cast<int>(this->_internal_refreshtoken().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vipuser.TokenInfo.refreshToken");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_refreshtoken(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vipuser.TokenInfo)
  return target;
}

size_t TokenInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vipuser.TokenInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string uuid = 1;
  if (this->uuid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uuid());
  }

  // string accessToken = 2;
  if (this->accesstoken().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_accesstoken());
  }

  // string refreshToken = 3;
  if (this->refreshtoken().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_refreshtoken());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TokenInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vipuser.TokenInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const TokenInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TokenInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vipuser.TokenInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vipuser.TokenInfo)
    MergeFrom(*source);
  }
}

void TokenInfo::MergeFrom(const TokenInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vipuser.TokenInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.uuid().size() > 0) {

    uuid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
  if (from.accesstoken().size() > 0) {

    accesstoken_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.accesstoken_);
  }
  if (from.refreshtoken().size() > 0) {

    refreshtoken_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.refreshtoken_);
  }
}

void TokenInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vipuser.TokenInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TokenInfo::CopyFrom(const TokenInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vipuser.TokenInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TokenInfo::IsInitialized() const {
  return true;
}

void TokenInfo::InternalSwap(TokenInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  uuid_.Swap(&other->uuid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  accesstoken_.Swap(&other->accesstoken_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  refreshtoken_.Swap(&other->refreshtoken_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata TokenInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReplyResult::InitAsDefaultInstance() {
}
class ReplyResult::_Internal {
 public:
};

ReplyResult::ReplyResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vipuser.ReplyResult)
}
ReplyResult::ReplyResult(const ReplyResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:vipuser.ReplyResult)
}

void ReplyResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReplyResult_vipuser_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  result_ = 0;
}

ReplyResult::~ReplyResult() {
  // @@protoc_insertion_point(destructor:vipuser.ReplyResult)
  SharedDtor();
}

void ReplyResult::SharedDtor() {
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReplyResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReplyResult& ReplyResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReplyResult_vipuser_2eproto.base);
  return *internal_default_instance();
}


void ReplyResult::Clear() {
// @@protoc_insertion_point(message_clear_start:vipuser.ReplyResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  result_ = 0;
  _internal_metadata_.Clear();
}

const char* ReplyResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vipuser.ReplyResult.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReplyResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vipuser.ReplyResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_result(), target);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vipuser.ReplyResult.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vipuser.ReplyResult)
  return target;
}

size_t ReplyResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vipuser.ReplyResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // int32 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReplyResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vipuser.ReplyResult)
  GOOGLE_DCHECK_NE(&from, this);
  const ReplyResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReplyResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vipuser.ReplyResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vipuser.ReplyResult)
    MergeFrom(*source);
  }
}

void ReplyResult::MergeFrom(const ReplyResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vipuser.ReplyResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void ReplyResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vipuser.ReplyResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplyResult::CopyFrom(const ReplyResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vipuser.ReplyResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplyResult::IsInitialized() const {
  return true;
}

void ReplyResult::InternalSwap(ReplyResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReplyResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateAccountRequest::InitAsDefaultInstance() {
  ::vipuser::_CreateAccountRequest_default_instance_._instance.get_mutable()->accountinfo_ = const_cast< ::vipuser::AccountInfo*>(
      ::vipuser::AccountInfo::internal_default_instance());
}
class CreateAccountRequest::_Internal {
 public:
  static const ::vipuser::AccountInfo& accountinfo(const CreateAccountRequest* msg);
};

const ::vipuser::AccountInfo&
CreateAccountRequest::_Internal::accountinfo(const CreateAccountRequest* msg) {
  return *msg->accountinfo_;
}
CreateAccountRequest::CreateAccountRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vipuser.CreateAccountRequest)
}
CreateAccountRequest::CreateAccountRequest(const CreateAccountRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_accountinfo()) {
    accountinfo_ = new ::vipuser::AccountInfo(*from.accountinfo_);
  } else {
    accountinfo_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:vipuser.CreateAccountRequest)
}

void CreateAccountRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateAccountRequest_vipuser_2eproto.base);
  accountinfo_ = nullptr;
}

CreateAccountRequest::~CreateAccountRequest() {
  // @@protoc_insertion_point(destructor:vipuser.CreateAccountRequest)
  SharedDtor();
}

void CreateAccountRequest::SharedDtor() {
  if (this != internal_default_instance()) delete accountinfo_;
}

void CreateAccountRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateAccountRequest& CreateAccountRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateAccountRequest_vipuser_2eproto.base);
  return *internal_default_instance();
}


void CreateAccountRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:vipuser.CreateAccountRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && accountinfo_ != nullptr) {
    delete accountinfo_;
  }
  accountinfo_ = nullptr;
  _internal_metadata_.Clear();
}

const char* CreateAccountRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vipuser.AccountInfo accountInfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_accountinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateAccountRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vipuser.CreateAccountRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vipuser.AccountInfo accountInfo = 1;
  if (this->has_accountinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::accountinfo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vipuser.CreateAccountRequest)
  return target;
}

size_t CreateAccountRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vipuser.CreateAccountRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vipuser.AccountInfo accountInfo = 1;
  if (this->has_accountinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *accountinfo_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateAccountRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vipuser.CreateAccountRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateAccountRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateAccountRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vipuser.CreateAccountRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vipuser.CreateAccountRequest)
    MergeFrom(*source);
  }
}

void CreateAccountRequest::MergeFrom(const CreateAccountRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vipuser.CreateAccountRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_accountinfo()) {
    _internal_mutable_accountinfo()->::vipuser::AccountInfo::MergeFrom(from._internal_accountinfo());
  }
}

void CreateAccountRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vipuser.CreateAccountRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateAccountRequest::CopyFrom(const CreateAccountRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vipuser.CreateAccountRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateAccountRequest::IsInitialized() const {
  return true;
}

void CreateAccountRequest::InternalSwap(CreateAccountRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(accountinfo_, other->accountinfo_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateAccountRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateAccountReply::InitAsDefaultInstance() {
  ::vipuser::_CreateAccountReply_default_instance_._instance.get_mutable()->result_ = const_cast< ::vipuser::ReplyResult*>(
      ::vipuser::ReplyResult::internal_default_instance());
  ::vipuser::_CreateAccountReply_default_instance_._instance.get_mutable()->tokeninfo_ = const_cast< ::vipuser::TokenInfo*>(
      ::vipuser::TokenInfo::internal_default_instance());
}
class CreateAccountReply::_Internal {
 public:
  static const ::vipuser::ReplyResult& result(const CreateAccountReply* msg);
  static const ::vipuser::TokenInfo& tokeninfo(const CreateAccountReply* msg);
};

const ::vipuser::ReplyResult&
CreateAccountReply::_Internal::result(const CreateAccountReply* msg) {
  return *msg->result_;
}
const ::vipuser::TokenInfo&
CreateAccountReply::_Internal::tokeninfo(const CreateAccountReply* msg) {
  return *msg->tokeninfo_;
}
CreateAccountReply::CreateAccountReply()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vipuser.CreateAccountReply)
}
CreateAccountReply::CreateAccountReply(const CreateAccountReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_result()) {
    result_ = new ::vipuser::ReplyResult(*from.result_);
  } else {
    result_ = nullptr;
  }
  if (from._internal_has_tokeninfo()) {
    tokeninfo_ = new ::vipuser::TokenInfo(*from.tokeninfo_);
  } else {
    tokeninfo_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:vipuser.CreateAccountReply)
}

void CreateAccountReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateAccountReply_vipuser_2eproto.base);
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tokeninfo_) -
      reinterpret_cast<char*>(&result_)) + sizeof(tokeninfo_));
}

CreateAccountReply::~CreateAccountReply() {
  // @@protoc_insertion_point(destructor:vipuser.CreateAccountReply)
  SharedDtor();
}

void CreateAccountReply::SharedDtor() {
  if (this != internal_default_instance()) delete result_;
  if (this != internal_default_instance()) delete tokeninfo_;
}

void CreateAccountReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateAccountReply& CreateAccountReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateAccountReply_vipuser_2eproto.base);
  return *internal_default_instance();
}


void CreateAccountReply::Clear() {
// @@protoc_insertion_point(message_clear_start:vipuser.CreateAccountReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && tokeninfo_ != nullptr) {
    delete tokeninfo_;
  }
  tokeninfo_ = nullptr;
  _internal_metadata_.Clear();
}

const char* CreateAccountReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vipuser.ReplyResult result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vipuser.TokenInfo tokenInfo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_tokeninfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateAccountReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vipuser.CreateAccountReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vipuser.ReplyResult result = 1;
  if (this->has_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result(this), target, stream);
  }

  // .vipuser.TokenInfo tokenInfo = 2;
  if (this->has_tokeninfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::tokeninfo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vipuser.CreateAccountReply)
  return target;
}

size_t CreateAccountReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vipuser.CreateAccountReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vipuser.ReplyResult result = 1;
  if (this->has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  // .vipuser.TokenInfo tokenInfo = 2;
  if (this->has_tokeninfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tokeninfo_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateAccountReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vipuser.CreateAccountReply)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateAccountReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateAccountReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vipuser.CreateAccountReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vipuser.CreateAccountReply)
    MergeFrom(*source);
  }
}

void CreateAccountReply::MergeFrom(const CreateAccountReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vipuser.CreateAccountReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    _internal_mutable_result()->::vipuser::ReplyResult::MergeFrom(from._internal_result());
  }
  if (from.has_tokeninfo()) {
    _internal_mutable_tokeninfo()->::vipuser::TokenInfo::MergeFrom(from._internal_tokeninfo());
  }
}

void CreateAccountReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vipuser.CreateAccountReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateAccountReply::CopyFrom(const CreateAccountReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vipuser.CreateAccountReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateAccountReply::IsInitialized() const {
  return true;
}

void CreateAccountReply::InternalSwap(CreateAccountReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(result_, other->result_);
  swap(tokeninfo_, other->tokeninfo_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateAccountReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LoginRequest::InitAsDefaultInstance() {
  ::vipuser::_LoginRequest_default_instance_._instance.get_mutable()->accountinfo_ = const_cast< ::vipuser::AccountInfo*>(
      ::vipuser::AccountInfo::internal_default_instance());
}
class LoginRequest::_Internal {
 public:
  static const ::vipuser::AccountInfo& accountinfo(const LoginRequest* msg);
};

const ::vipuser::AccountInfo&
LoginRequest::_Internal::accountinfo(const LoginRequest* msg) {
  return *msg->accountinfo_;
}
LoginRequest::LoginRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vipuser.LoginRequest)
}
LoginRequest::LoginRequest(const LoginRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_accountinfo()) {
    accountinfo_ = new ::vipuser::AccountInfo(*from.accountinfo_);
  } else {
    accountinfo_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:vipuser.LoginRequest)
}

void LoginRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LoginRequest_vipuser_2eproto.base);
  accountinfo_ = nullptr;
}

LoginRequest::~LoginRequest() {
  // @@protoc_insertion_point(destructor:vipuser.LoginRequest)
  SharedDtor();
}

void LoginRequest::SharedDtor() {
  if (this != internal_default_instance()) delete accountinfo_;
}

void LoginRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoginRequest& LoginRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoginRequest_vipuser_2eproto.base);
  return *internal_default_instance();
}


void LoginRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:vipuser.LoginRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && accountinfo_ != nullptr) {
    delete accountinfo_;
  }
  accountinfo_ = nullptr;
  _internal_metadata_.Clear();
}

const char* LoginRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vipuser.AccountInfo accountInfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_accountinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoginRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vipuser.LoginRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vipuser.AccountInfo accountInfo = 1;
  if (this->has_accountinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::accountinfo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vipuser.LoginRequest)
  return target;
}

size_t LoginRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vipuser.LoginRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vipuser.AccountInfo accountInfo = 1;
  if (this->has_accountinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *accountinfo_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoginRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vipuser.LoginRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoginRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vipuser.LoginRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vipuser.LoginRequest)
    MergeFrom(*source);
  }
}

void LoginRequest::MergeFrom(const LoginRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vipuser.LoginRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_accountinfo()) {
    _internal_mutable_accountinfo()->::vipuser::AccountInfo::MergeFrom(from._internal_accountinfo());
  }
}

void LoginRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vipuser.LoginRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginRequest::CopyFrom(const LoginRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vipuser.LoginRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRequest::IsInitialized() const {
  return true;
}

void LoginRequest::InternalSwap(LoginRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(accountinfo_, other->accountinfo_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoginRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LoginReply::InitAsDefaultInstance() {
  ::vipuser::_LoginReply_default_instance_._instance.get_mutable()->result_ = const_cast< ::vipuser::ReplyResult*>(
      ::vipuser::ReplyResult::internal_default_instance());
  ::vipuser::_LoginReply_default_instance_._instance.get_mutable()->tokeninfo_ = const_cast< ::vipuser::TokenInfo*>(
      ::vipuser::TokenInfo::internal_default_instance());
}
class LoginReply::_Internal {
 public:
  static const ::vipuser::ReplyResult& result(const LoginReply* msg);
  static const ::vipuser::TokenInfo& tokeninfo(const LoginReply* msg);
};

const ::vipuser::ReplyResult&
LoginReply::_Internal::result(const LoginReply* msg) {
  return *msg->result_;
}
const ::vipuser::TokenInfo&
LoginReply::_Internal::tokeninfo(const LoginReply* msg) {
  return *msg->tokeninfo_;
}
LoginReply::LoginReply()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vipuser.LoginReply)
}
LoginReply::LoginReply(const LoginReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_result()) {
    result_ = new ::vipuser::ReplyResult(*from.result_);
  } else {
    result_ = nullptr;
  }
  if (from._internal_has_tokeninfo()) {
    tokeninfo_ = new ::vipuser::TokenInfo(*from.tokeninfo_);
  } else {
    tokeninfo_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:vipuser.LoginReply)
}

void LoginReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LoginReply_vipuser_2eproto.base);
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tokeninfo_) -
      reinterpret_cast<char*>(&result_)) + sizeof(tokeninfo_));
}

LoginReply::~LoginReply() {
  // @@protoc_insertion_point(destructor:vipuser.LoginReply)
  SharedDtor();
}

void LoginReply::SharedDtor() {
  if (this != internal_default_instance()) delete result_;
  if (this != internal_default_instance()) delete tokeninfo_;
}

void LoginReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoginReply& LoginReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoginReply_vipuser_2eproto.base);
  return *internal_default_instance();
}


void LoginReply::Clear() {
// @@protoc_insertion_point(message_clear_start:vipuser.LoginReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && tokeninfo_ != nullptr) {
    delete tokeninfo_;
  }
  tokeninfo_ = nullptr;
  _internal_metadata_.Clear();
}

const char* LoginReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vipuser.ReplyResult result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vipuser.TokenInfo tokenInfo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_tokeninfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoginReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vipuser.LoginReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vipuser.ReplyResult result = 1;
  if (this->has_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result(this), target, stream);
  }

  // .vipuser.TokenInfo tokenInfo = 2;
  if (this->has_tokeninfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::tokeninfo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vipuser.LoginReply)
  return target;
}

size_t LoginReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vipuser.LoginReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vipuser.ReplyResult result = 1;
  if (this->has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  // .vipuser.TokenInfo tokenInfo = 2;
  if (this->has_tokeninfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tokeninfo_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoginReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vipuser.LoginReply)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoginReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vipuser.LoginReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vipuser.LoginReply)
    MergeFrom(*source);
  }
}

void LoginReply::MergeFrom(const LoginReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vipuser.LoginReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    _internal_mutable_result()->::vipuser::ReplyResult::MergeFrom(from._internal_result());
  }
  if (from.has_tokeninfo()) {
    _internal_mutable_tokeninfo()->::vipuser::TokenInfo::MergeFrom(from._internal_tokeninfo());
  }
}

void LoginReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vipuser.LoginReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginReply::CopyFrom(const LoginReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vipuser.LoginReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginReply::IsInitialized() const {
  return true;
}

void LoginReply::InternalSwap(LoginReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(result_, other->result_);
  swap(tokeninfo_, other->tokeninfo_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoginReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LogoutRequest::InitAsDefaultInstance() {
}
class LogoutRequest::_Internal {
 public:
};

LogoutRequest::LogoutRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vipuser.LogoutRequest)
}
LogoutRequest::LogoutRequest(const LogoutRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  accesstoken_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_accesstoken().empty()) {
    accesstoken_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.accesstoken_);
  }
  // @@protoc_insertion_point(copy_constructor:vipuser.LogoutRequest)
}

void LogoutRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LogoutRequest_vipuser_2eproto.base);
  accesstoken_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

LogoutRequest::~LogoutRequest() {
  // @@protoc_insertion_point(destructor:vipuser.LogoutRequest)
  SharedDtor();
}

void LogoutRequest::SharedDtor() {
  accesstoken_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LogoutRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogoutRequest& LogoutRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LogoutRequest_vipuser_2eproto.base);
  return *internal_default_instance();
}


void LogoutRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:vipuser.LogoutRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  accesstoken_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* LogoutRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string accessToken = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_accesstoken();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vipuser.LogoutRequest.accessToken"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LogoutRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vipuser.LogoutRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string accessToken = 1;
  if (this->accesstoken().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_accesstoken().data(), static_cast<int>(this->_internal_accesstoken().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vipuser.LogoutRequest.accessToken");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_accesstoken(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vipuser.LogoutRequest)
  return target;
}

size_t LogoutRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vipuser.LogoutRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string accessToken = 1;
  if (this->accesstoken().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_accesstoken());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogoutRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vipuser.LogoutRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LogoutRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LogoutRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vipuser.LogoutRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vipuser.LogoutRequest)
    MergeFrom(*source);
  }
}

void LogoutRequest::MergeFrom(const LogoutRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vipuser.LogoutRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.accesstoken().size() > 0) {

    accesstoken_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.accesstoken_);
  }
}

void LogoutRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vipuser.LogoutRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogoutRequest::CopyFrom(const LogoutRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vipuser.LogoutRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogoutRequest::IsInitialized() const {
  return true;
}

void LogoutRequest::InternalSwap(LogoutRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  accesstoken_.Swap(&other->accesstoken_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata LogoutRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LogoutReply::InitAsDefaultInstance() {
  ::vipuser::_LogoutReply_default_instance_._instance.get_mutable()->result_ = const_cast< ::vipuser::ReplyResult*>(
      ::vipuser::ReplyResult::internal_default_instance());
}
class LogoutReply::_Internal {
 public:
  static const ::vipuser::ReplyResult& result(const LogoutReply* msg);
};

const ::vipuser::ReplyResult&
LogoutReply::_Internal::result(const LogoutReply* msg) {
  return *msg->result_;
}
LogoutReply::LogoutReply()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vipuser.LogoutReply)
}
LogoutReply::LogoutReply(const LogoutReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_result()) {
    result_ = new ::vipuser::ReplyResult(*from.result_);
  } else {
    result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:vipuser.LogoutReply)
}

void LogoutReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LogoutReply_vipuser_2eproto.base);
  result_ = nullptr;
}

LogoutReply::~LogoutReply() {
  // @@protoc_insertion_point(destructor:vipuser.LogoutReply)
  SharedDtor();
}

void LogoutReply::SharedDtor() {
  if (this != internal_default_instance()) delete result_;
}

void LogoutReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogoutReply& LogoutReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LogoutReply_vipuser_2eproto.base);
  return *internal_default_instance();
}


void LogoutReply::Clear() {
// @@protoc_insertion_point(message_clear_start:vipuser.LogoutReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  _internal_metadata_.Clear();
}

const char* LogoutReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vipuser.ReplyResult result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LogoutReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vipuser.LogoutReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vipuser.ReplyResult result = 1;
  if (this->has_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vipuser.LogoutReply)
  return target;
}

size_t LogoutReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vipuser.LogoutReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vipuser.ReplyResult result = 1;
  if (this->has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogoutReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vipuser.LogoutReply)
  GOOGLE_DCHECK_NE(&from, this);
  const LogoutReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LogoutReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vipuser.LogoutReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vipuser.LogoutReply)
    MergeFrom(*source);
  }
}

void LogoutReply::MergeFrom(const LogoutReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vipuser.LogoutReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    _internal_mutable_result()->::vipuser::ReplyResult::MergeFrom(from._internal_result());
  }
}

void LogoutReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vipuser.LogoutReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogoutReply::CopyFrom(const LogoutReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vipuser.LogoutReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogoutReply::IsInitialized() const {
  return true;
}

void LogoutReply::InternalSwap(LogoutReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LogoutReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReLoginRequest::InitAsDefaultInstance() {
}
class ReLoginRequest::_Internal {
 public:
};

ReLoginRequest::ReLoginRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vipuser.ReLoginRequest)
}
ReLoginRequest::ReLoginRequest(const ReLoginRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  refreshtoken_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_refreshtoken().empty()) {
    refreshtoken_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.refreshtoken_);
  }
  // @@protoc_insertion_point(copy_constructor:vipuser.ReLoginRequest)
}

void ReLoginRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReLoginRequest_vipuser_2eproto.base);
  refreshtoken_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ReLoginRequest::~ReLoginRequest() {
  // @@protoc_insertion_point(destructor:vipuser.ReLoginRequest)
  SharedDtor();
}

void ReLoginRequest::SharedDtor() {
  refreshtoken_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReLoginRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReLoginRequest& ReLoginRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReLoginRequest_vipuser_2eproto.base);
  return *internal_default_instance();
}


void ReLoginRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:vipuser.ReLoginRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  refreshtoken_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* ReLoginRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string refreshToken = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_refreshtoken();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vipuser.ReLoginRequest.refreshToken"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReLoginRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vipuser.ReLoginRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string refreshToken = 1;
  if (this->refreshtoken().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_refreshtoken().data(), static_cast<int>(this->_internal_refreshtoken().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vipuser.ReLoginRequest.refreshToken");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_refreshtoken(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vipuser.ReLoginRequest)
  return target;
}

size_t ReLoginRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vipuser.ReLoginRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string refreshToken = 1;
  if (this->refreshtoken().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_refreshtoken());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReLoginRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vipuser.ReLoginRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ReLoginRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReLoginRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vipuser.ReLoginRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vipuser.ReLoginRequest)
    MergeFrom(*source);
  }
}

void ReLoginRequest::MergeFrom(const ReLoginRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vipuser.ReLoginRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.refreshtoken().size() > 0) {

    refreshtoken_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.refreshtoken_);
  }
}

void ReLoginRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vipuser.ReLoginRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReLoginRequest::CopyFrom(const ReLoginRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vipuser.ReLoginRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReLoginRequest::IsInitialized() const {
  return true;
}

void ReLoginRequest::InternalSwap(ReLoginRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  refreshtoken_.Swap(&other->refreshtoken_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ReLoginRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReLoginReply::InitAsDefaultInstance() {
  ::vipuser::_ReLoginReply_default_instance_._instance.get_mutable()->result_ = const_cast< ::vipuser::ReplyResult*>(
      ::vipuser::ReplyResult::internal_default_instance());
  ::vipuser::_ReLoginReply_default_instance_._instance.get_mutable()->tokeninfo_ = const_cast< ::vipuser::TokenInfo*>(
      ::vipuser::TokenInfo::internal_default_instance());
}
class ReLoginReply::_Internal {
 public:
  static const ::vipuser::ReplyResult& result(const ReLoginReply* msg);
  static const ::vipuser::TokenInfo& tokeninfo(const ReLoginReply* msg);
};

const ::vipuser::ReplyResult&
ReLoginReply::_Internal::result(const ReLoginReply* msg) {
  return *msg->result_;
}
const ::vipuser::TokenInfo&
ReLoginReply::_Internal::tokeninfo(const ReLoginReply* msg) {
  return *msg->tokeninfo_;
}
ReLoginReply::ReLoginReply()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vipuser.ReLoginReply)
}
ReLoginReply::ReLoginReply(const ReLoginReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_result()) {
    result_ = new ::vipuser::ReplyResult(*from.result_);
  } else {
    result_ = nullptr;
  }
  if (from._internal_has_tokeninfo()) {
    tokeninfo_ = new ::vipuser::TokenInfo(*from.tokeninfo_);
  } else {
    tokeninfo_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:vipuser.ReLoginReply)
}

void ReLoginReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReLoginReply_vipuser_2eproto.base);
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tokeninfo_) -
      reinterpret_cast<char*>(&result_)) + sizeof(tokeninfo_));
}

ReLoginReply::~ReLoginReply() {
  // @@protoc_insertion_point(destructor:vipuser.ReLoginReply)
  SharedDtor();
}

void ReLoginReply::SharedDtor() {
  if (this != internal_default_instance()) delete result_;
  if (this != internal_default_instance()) delete tokeninfo_;
}

void ReLoginReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReLoginReply& ReLoginReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReLoginReply_vipuser_2eproto.base);
  return *internal_default_instance();
}


void ReLoginReply::Clear() {
// @@protoc_insertion_point(message_clear_start:vipuser.ReLoginReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && tokeninfo_ != nullptr) {
    delete tokeninfo_;
  }
  tokeninfo_ = nullptr;
  _internal_metadata_.Clear();
}

const char* ReLoginReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vipuser.ReplyResult result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vipuser.TokenInfo tokenInfo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_tokeninfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReLoginReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vipuser.ReLoginReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vipuser.ReplyResult result = 1;
  if (this->has_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result(this), target, stream);
  }

  // .vipuser.TokenInfo tokenInfo = 2;
  if (this->has_tokeninfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::tokeninfo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vipuser.ReLoginReply)
  return target;
}

size_t ReLoginReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vipuser.ReLoginReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vipuser.ReplyResult result = 1;
  if (this->has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  // .vipuser.TokenInfo tokenInfo = 2;
  if (this->has_tokeninfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tokeninfo_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReLoginReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vipuser.ReLoginReply)
  GOOGLE_DCHECK_NE(&from, this);
  const ReLoginReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReLoginReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vipuser.ReLoginReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vipuser.ReLoginReply)
    MergeFrom(*source);
  }
}

void ReLoginReply::MergeFrom(const ReLoginReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vipuser.ReLoginReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    _internal_mutable_result()->::vipuser::ReplyResult::MergeFrom(from._internal_result());
  }
  if (from.has_tokeninfo()) {
    _internal_mutable_tokeninfo()->::vipuser::TokenInfo::MergeFrom(from._internal_tokeninfo());
  }
}

void ReLoginReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vipuser.ReLoginReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReLoginReply::CopyFrom(const ReLoginReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vipuser.ReLoginReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReLoginReply::IsInitialized() const {
  return true;
}

void ReLoginReply::InternalSwap(ReLoginReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(result_, other->result_);
  swap(tokeninfo_, other->tokeninfo_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReLoginReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UserSession::InitAsDefaultInstance() {
}
class UserSession::_Internal {
 public:
};

UserSession::UserSession()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vipuser.UserSession)
}
UserSession::UserSession(const UserSession& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_uuid().empty()) {
    uuid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
  accesstoken_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_accesstoken().empty()) {
    accesstoken_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.accesstoken_);
  }
  // @@protoc_insertion_point(copy_constructor:vipuser.UserSession)
}

void UserSession::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UserSession_vipuser_2eproto.base);
  uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  accesstoken_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

UserSession::~UserSession() {
  // @@protoc_insertion_point(destructor:vipuser.UserSession)
  SharedDtor();
}

void UserSession::SharedDtor() {
  uuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  accesstoken_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UserSession::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserSession& UserSession::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserSession_vipuser_2eproto.base);
  return *internal_default_instance();
}


void UserSession::Clear() {
// @@protoc_insertion_point(message_clear_start:vipuser.UserSession)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uuid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  accesstoken_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* UserSession::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string uuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_uuid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vipuser.UserSession.uuid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string accessToken = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_accesstoken();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vipuser.UserSession.accessToken"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserSession::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vipuser.UserSession)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string uuid = 1;
  if (this->uuid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uuid().data(), static_cast<int>(this->_internal_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vipuser.UserSession.uuid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_uuid(), target);
  }

  // string accessToken = 2;
  if (this->accesstoken().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_accesstoken().data(), static_cast<int>(this->_internal_accesstoken().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vipuser.UserSession.accessToken");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_accesstoken(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vipuser.UserSession)
  return target;
}

size_t UserSession::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vipuser.UserSession)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string uuid = 1;
  if (this->uuid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uuid());
  }

  // string accessToken = 2;
  if (this->accesstoken().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_accesstoken());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserSession::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vipuser.UserSession)
  GOOGLE_DCHECK_NE(&from, this);
  const UserSession* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserSession>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vipuser.UserSession)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vipuser.UserSession)
    MergeFrom(*source);
  }
}

void UserSession::MergeFrom(const UserSession& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vipuser.UserSession)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.uuid().size() > 0) {

    uuid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
  if (from.accesstoken().size() > 0) {

    accesstoken_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.accesstoken_);
  }
}

void UserSession::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vipuser.UserSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserSession::CopyFrom(const UserSession& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vipuser.UserSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserSession::IsInitialized() const {
  return true;
}

void UserSession::InternalSwap(UserSession* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  uuid_.Swap(&other->uuid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  accesstoken_.Swap(&other->accesstoken_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata UserSession::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BusinessRequest::InitAsDefaultInstance() {
  ::vipuser::_BusinessRequest_default_instance_._instance.get_mutable()->session_ = const_cast< ::vipuser::UserSession*>(
      ::vipuser::UserSession::internal_default_instance());
}
class BusinessRequest::_Internal {
 public:
  static const ::vipuser::UserSession& session(const BusinessRequest* msg);
};

const ::vipuser::UserSession&
BusinessRequest::_Internal::session(const BusinessRequest* msg) {
  return *msg->session_;
}
BusinessRequest::BusinessRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vipuser.BusinessRequest)
}
BusinessRequest::BusinessRequest(const BusinessRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  params_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_params().empty()) {
    params_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.params_);
  }
  if (from._internal_has_session()) {
    session_ = new ::vipuser::UserSession(*from.session_);
  } else {
    session_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:vipuser.BusinessRequest)
}

void BusinessRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BusinessRequest_vipuser_2eproto.base);
  params_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  session_ = nullptr;
}

BusinessRequest::~BusinessRequest() {
  // @@protoc_insertion_point(destructor:vipuser.BusinessRequest)
  SharedDtor();
}

void BusinessRequest::SharedDtor() {
  params_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete session_;
}

void BusinessRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BusinessRequest& BusinessRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BusinessRequest_vipuser_2eproto.base);
  return *internal_default_instance();
}


void BusinessRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:vipuser.BusinessRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  params_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && session_ != nullptr) {
    delete session_;
  }
  session_ = nullptr;
  _internal_metadata_.Clear();
}

const char* BusinessRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vipuser.UserSession session = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_session(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string params = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_params();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vipuser.BusinessRequest.params"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BusinessRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vipuser.BusinessRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vipuser.UserSession session = 1;
  if (this->has_session()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::session(this), target, stream);
  }

  // string params = 2;
  if (this->params().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_params().data(), static_cast<int>(this->_internal_params().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vipuser.BusinessRequest.params");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_params(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vipuser.BusinessRequest)
  return target;
}

size_t BusinessRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vipuser.BusinessRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string params = 2;
  if (this->params().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_params());
  }

  // .vipuser.UserSession session = 1;
  if (this->has_session()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *session_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BusinessRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vipuser.BusinessRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BusinessRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BusinessRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vipuser.BusinessRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vipuser.BusinessRequest)
    MergeFrom(*source);
  }
}

void BusinessRequest::MergeFrom(const BusinessRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vipuser.BusinessRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.params().size() > 0) {

    params_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.params_);
  }
  if (from.has_session()) {
    _internal_mutable_session()->::vipuser::UserSession::MergeFrom(from._internal_session());
  }
}

void BusinessRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vipuser.BusinessRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BusinessRequest::CopyFrom(const BusinessRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vipuser.BusinessRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BusinessRequest::IsInitialized() const {
  return true;
}

void BusinessRequest::InternalSwap(BusinessRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  params_.Swap(&other->params_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(session_, other->session_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BusinessRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BusinessReply::InitAsDefaultInstance() {
  ::vipuser::_BusinessReply_default_instance_._instance.get_mutable()->result_ = const_cast< ::vipuser::ReplyResult*>(
      ::vipuser::ReplyResult::internal_default_instance());
}
class BusinessReply::_Internal {
 public:
  static const ::vipuser::ReplyResult& result(const BusinessReply* msg);
};

const ::vipuser::ReplyResult&
BusinessReply::_Internal::result(const BusinessReply* msg) {
  return *msg->result_;
}
BusinessReply::BusinessReply()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:vipuser.BusinessReply)
}
BusinessReply::BusinessReply(const BusinessReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from._internal_has_result()) {
    result_ = new ::vipuser::ReplyResult(*from.result_);
  } else {
    result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:vipuser.BusinessReply)
}

void BusinessReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BusinessReply_vipuser_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  result_ = nullptr;
}

BusinessReply::~BusinessReply() {
  // @@protoc_insertion_point(destructor:vipuser.BusinessReply)
  SharedDtor();
}

void BusinessReply::SharedDtor() {
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete result_;
}

void BusinessReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BusinessReply& BusinessReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BusinessReply_vipuser_2eproto.base);
  return *internal_default_instance();
}


void BusinessReply::Clear() {
// @@protoc_insertion_point(message_clear_start:vipuser.BusinessReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  _internal_metadata_.Clear();
}

const char* BusinessReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vipuser.ReplyResult result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vipuser.BusinessReply.data"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BusinessReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vipuser.BusinessReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vipuser.ReplyResult result = 1;
  if (this->has_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result(this), target, stream);
  }

  // string data = 2;
  if (this->data().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_data().data(), static_cast<int>(this->_internal_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vipuser.BusinessReply.data");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vipuser.BusinessReply)
  return target;
}

size_t BusinessReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vipuser.BusinessReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string data = 2;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_data());
  }

  // .vipuser.ReplyResult result = 1;
  if (this->has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BusinessReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vipuser.BusinessReply)
  GOOGLE_DCHECK_NE(&from, this);
  const BusinessReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BusinessReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vipuser.BusinessReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vipuser.BusinessReply)
    MergeFrom(*source);
  }
}

void BusinessReply::MergeFrom(const BusinessReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vipuser.BusinessReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.has_result()) {
    _internal_mutable_result()->::vipuser::ReplyResult::MergeFrom(from._internal_result());
  }
}

void BusinessReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vipuser.BusinessReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BusinessReply::CopyFrom(const BusinessReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vipuser.BusinessReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BusinessReply::IsInitialized() const {
  return true;
}

void BusinessReply::InternalSwap(BusinessReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BusinessReply::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace vipuser
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::vipuser::AccountInfo* Arena::CreateMaybeMessage< ::vipuser::AccountInfo >(Arena* arena) {
  return Arena::CreateInternal< ::vipuser::AccountInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::vipuser::TokenInfo* Arena::CreateMaybeMessage< ::vipuser::TokenInfo >(Arena* arena) {
  return Arena::CreateInternal< ::vipuser::TokenInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::vipuser::ReplyResult* Arena::CreateMaybeMessage< ::vipuser::ReplyResult >(Arena* arena) {
  return Arena::CreateInternal< ::vipuser::ReplyResult >(arena);
}
template<> PROTOBUF_NOINLINE ::vipuser::CreateAccountRequest* Arena::CreateMaybeMessage< ::vipuser::CreateAccountRequest >(Arena* arena) {
  return Arena::CreateInternal< ::vipuser::CreateAccountRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::vipuser::CreateAccountReply* Arena::CreateMaybeMessage< ::vipuser::CreateAccountReply >(Arena* arena) {
  return Arena::CreateInternal< ::vipuser::CreateAccountReply >(arena);
}
template<> PROTOBUF_NOINLINE ::vipuser::LoginRequest* Arena::CreateMaybeMessage< ::vipuser::LoginRequest >(Arena* arena) {
  return Arena::CreateInternal< ::vipuser::LoginRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::vipuser::LoginReply* Arena::CreateMaybeMessage< ::vipuser::LoginReply >(Arena* arena) {
  return Arena::CreateInternal< ::vipuser::LoginReply >(arena);
}
template<> PROTOBUF_NOINLINE ::vipuser::LogoutRequest* Arena::CreateMaybeMessage< ::vipuser::LogoutRequest >(Arena* arena) {
  return Arena::CreateInternal< ::vipuser::LogoutRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::vipuser::LogoutReply* Arena::CreateMaybeMessage< ::vipuser::LogoutReply >(Arena* arena) {
  return Arena::CreateInternal< ::vipuser::LogoutReply >(arena);
}
template<> PROTOBUF_NOINLINE ::vipuser::ReLoginRequest* Arena::CreateMaybeMessage< ::vipuser::ReLoginRequest >(Arena* arena) {
  return Arena::CreateInternal< ::vipuser::ReLoginRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::vipuser::ReLoginReply* Arena::CreateMaybeMessage< ::vipuser::ReLoginReply >(Arena* arena) {
  return Arena::CreateInternal< ::vipuser::ReLoginReply >(arena);
}
template<> PROTOBUF_NOINLINE ::vipuser::UserSession* Arena::CreateMaybeMessage< ::vipuser::UserSession >(Arena* arena) {
  return Arena::CreateInternal< ::vipuser::UserSession >(arena);
}
template<> PROTOBUF_NOINLINE ::vipuser::BusinessRequest* Arena::CreateMaybeMessage< ::vipuser::BusinessRequest >(Arena* arena) {
  return Arena::CreateInternal< ::vipuser::BusinessRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::vipuser::BusinessReply* Arena::CreateMaybeMessage< ::vipuser::BusinessReply >(Arena* arena) {
  return Arena::CreateInternal< ::vipuser::BusinessReply >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
