// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: vipuser.proto
#ifndef GRPC_vipuser_2eproto__INCLUDED
#define GRPC_vipuser_2eproto__INCLUDED

#include "vipuser.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace vipuser_proto {

class VipUser final {
 public:
  static constexpr char const* service_full_name() {
    return "vipuser_proto.VipUser";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status CreateAcount(::grpc::ClientContext* context, const ::vipuser_proto::CreateAccountRequest& request, ::vipuser_proto::CreateAccountResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vipuser_proto::CreateAccountResponse>> AsyncCreateAcount(::grpc::ClientContext* context, const ::vipuser_proto::CreateAccountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vipuser_proto::CreateAccountResponse>>(AsyncCreateAcountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vipuser_proto::CreateAccountResponse>> PrepareAsyncCreateAcount(::grpc::ClientContext* context, const ::vipuser_proto::CreateAccountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vipuser_proto::CreateAccountResponse>>(PrepareAsyncCreateAcountRaw(context, request, cq));
    }
    virtual ::grpc::Status Login(::grpc::ClientContext* context, const ::vipuser_proto::LoginRequest& request, ::vipuser_proto::LoginResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vipuser_proto::LoginResponse>> AsyncLogin(::grpc::ClientContext* context, const ::vipuser_proto::LoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vipuser_proto::LoginResponse>>(AsyncLoginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vipuser_proto::LoginResponse>> PrepareAsyncLogin(::grpc::ClientContext* context, const ::vipuser_proto::LoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vipuser_proto::LoginResponse>>(PrepareAsyncLoginRaw(context, request, cq));
    }
    virtual ::grpc::Status Logout(::grpc::ClientContext* context, const ::vipuser_proto::LogoutRequest& request, ::vipuser_proto::LogoutResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vipuser_proto::LogoutResponse>> AsyncLogout(::grpc::ClientContext* context, const ::vipuser_proto::LogoutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vipuser_proto::LogoutResponse>>(AsyncLogoutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vipuser_proto::LogoutResponse>> PrepareAsyncLogout(::grpc::ClientContext* context, const ::vipuser_proto::LogoutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vipuser_proto::LogoutResponse>>(PrepareAsyncLogoutRaw(context, request, cq));
    }
    virtual ::grpc::Status ReLogin(::grpc::ClientContext* context, const ::vipuser_proto::ReLoginRequest& request, ::vipuser_proto::ReLoginResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vipuser_proto::ReLoginResponse>> AsyncReLogin(::grpc::ClientContext* context, const ::vipuser_proto::ReLoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vipuser_proto::ReLoginResponse>>(AsyncReLoginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vipuser_proto::ReLoginResponse>> PrepareAsyncReLogin(::grpc::ClientContext* context, const ::vipuser_proto::ReLoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vipuser_proto::ReLoginResponse>>(PrepareAsyncReLoginRaw(context, request, cq));
    }
    virtual ::grpc::Status DoBusiness(::grpc::ClientContext* context, const ::vipuser_proto::BusinessRequest& request, ::vipuser_proto::BusinessResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vipuser_proto::BusinessResponse>> AsyncDoBusiness(::grpc::ClientContext* context, const ::vipuser_proto::BusinessRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vipuser_proto::BusinessResponse>>(AsyncDoBusinessRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vipuser_proto::BusinessResponse>> PrepareAsyncDoBusiness(::grpc::ClientContext* context, const ::vipuser_proto::BusinessRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vipuser_proto::BusinessResponse>>(PrepareAsyncDoBusinessRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void CreateAcount(::grpc::ClientContext* context, const ::vipuser_proto::CreateAccountRequest* request, ::vipuser_proto::CreateAccountResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateAcount(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vipuser_proto::CreateAccountResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CreateAcount(::grpc::ClientContext* context, const ::vipuser_proto::CreateAccountRequest* request, ::vipuser_proto::CreateAccountResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CreateAcount(::grpc::ClientContext* context, const ::vipuser_proto::CreateAccountRequest* request, ::vipuser_proto::CreateAccountResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CreateAcount(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vipuser_proto::CreateAccountResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CreateAcount(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vipuser_proto::CreateAccountResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void Login(::grpc::ClientContext* context, const ::vipuser_proto::LoginRequest* request, ::vipuser_proto::LoginResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Login(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vipuser_proto::LoginResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Login(::grpc::ClientContext* context, const ::vipuser_proto::LoginRequest* request, ::vipuser_proto::LoginResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Login(::grpc::ClientContext* context, const ::vipuser_proto::LoginRequest* request, ::vipuser_proto::LoginResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Login(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vipuser_proto::LoginResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Login(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vipuser_proto::LoginResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void Logout(::grpc::ClientContext* context, const ::vipuser_proto::LogoutRequest* request, ::vipuser_proto::LogoutResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Logout(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vipuser_proto::LogoutResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Logout(::grpc::ClientContext* context, const ::vipuser_proto::LogoutRequest* request, ::vipuser_proto::LogoutResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Logout(::grpc::ClientContext* context, const ::vipuser_proto::LogoutRequest* request, ::vipuser_proto::LogoutResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Logout(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vipuser_proto::LogoutResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Logout(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vipuser_proto::LogoutResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void ReLogin(::grpc::ClientContext* context, const ::vipuser_proto::ReLoginRequest* request, ::vipuser_proto::ReLoginResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ReLogin(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vipuser_proto::ReLoginResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ReLogin(::grpc::ClientContext* context, const ::vipuser_proto::ReLoginRequest* request, ::vipuser_proto::ReLoginResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ReLogin(::grpc::ClientContext* context, const ::vipuser_proto::ReLoginRequest* request, ::vipuser_proto::ReLoginResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ReLogin(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vipuser_proto::ReLoginResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ReLogin(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vipuser_proto::ReLoginResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void DoBusiness(::grpc::ClientContext* context, const ::vipuser_proto::BusinessRequest* request, ::vipuser_proto::BusinessResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DoBusiness(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vipuser_proto::BusinessResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DoBusiness(::grpc::ClientContext* context, const ::vipuser_proto::BusinessRequest* request, ::vipuser_proto::BusinessResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DoBusiness(::grpc::ClientContext* context, const ::vipuser_proto::BusinessRequest* request, ::vipuser_proto::BusinessResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DoBusiness(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vipuser_proto::BusinessResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DoBusiness(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vipuser_proto::BusinessResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vipuser_proto::CreateAccountResponse>* AsyncCreateAcountRaw(::grpc::ClientContext* context, const ::vipuser_proto::CreateAccountRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vipuser_proto::CreateAccountResponse>* PrepareAsyncCreateAcountRaw(::grpc::ClientContext* context, const ::vipuser_proto::CreateAccountRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vipuser_proto::LoginResponse>* AsyncLoginRaw(::grpc::ClientContext* context, const ::vipuser_proto::LoginRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vipuser_proto::LoginResponse>* PrepareAsyncLoginRaw(::grpc::ClientContext* context, const ::vipuser_proto::LoginRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vipuser_proto::LogoutResponse>* AsyncLogoutRaw(::grpc::ClientContext* context, const ::vipuser_proto::LogoutRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vipuser_proto::LogoutResponse>* PrepareAsyncLogoutRaw(::grpc::ClientContext* context, const ::vipuser_proto::LogoutRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vipuser_proto::ReLoginResponse>* AsyncReLoginRaw(::grpc::ClientContext* context, const ::vipuser_proto::ReLoginRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vipuser_proto::ReLoginResponse>* PrepareAsyncReLoginRaw(::grpc::ClientContext* context, const ::vipuser_proto::ReLoginRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vipuser_proto::BusinessResponse>* AsyncDoBusinessRaw(::grpc::ClientContext* context, const ::vipuser_proto::BusinessRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vipuser_proto::BusinessResponse>* PrepareAsyncDoBusinessRaw(::grpc::ClientContext* context, const ::vipuser_proto::BusinessRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status CreateAcount(::grpc::ClientContext* context, const ::vipuser_proto::CreateAccountRequest& request, ::vipuser_proto::CreateAccountResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vipuser_proto::CreateAccountResponse>> AsyncCreateAcount(::grpc::ClientContext* context, const ::vipuser_proto::CreateAccountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vipuser_proto::CreateAccountResponse>>(AsyncCreateAcountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vipuser_proto::CreateAccountResponse>> PrepareAsyncCreateAcount(::grpc::ClientContext* context, const ::vipuser_proto::CreateAccountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vipuser_proto::CreateAccountResponse>>(PrepareAsyncCreateAcountRaw(context, request, cq));
    }
    ::grpc::Status Login(::grpc::ClientContext* context, const ::vipuser_proto::LoginRequest& request, ::vipuser_proto::LoginResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vipuser_proto::LoginResponse>> AsyncLogin(::grpc::ClientContext* context, const ::vipuser_proto::LoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vipuser_proto::LoginResponse>>(AsyncLoginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vipuser_proto::LoginResponse>> PrepareAsyncLogin(::grpc::ClientContext* context, const ::vipuser_proto::LoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vipuser_proto::LoginResponse>>(PrepareAsyncLoginRaw(context, request, cq));
    }
    ::grpc::Status Logout(::grpc::ClientContext* context, const ::vipuser_proto::LogoutRequest& request, ::vipuser_proto::LogoutResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vipuser_proto::LogoutResponse>> AsyncLogout(::grpc::ClientContext* context, const ::vipuser_proto::LogoutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vipuser_proto::LogoutResponse>>(AsyncLogoutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vipuser_proto::LogoutResponse>> PrepareAsyncLogout(::grpc::ClientContext* context, const ::vipuser_proto::LogoutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vipuser_proto::LogoutResponse>>(PrepareAsyncLogoutRaw(context, request, cq));
    }
    ::grpc::Status ReLogin(::grpc::ClientContext* context, const ::vipuser_proto::ReLoginRequest& request, ::vipuser_proto::ReLoginResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vipuser_proto::ReLoginResponse>> AsyncReLogin(::grpc::ClientContext* context, const ::vipuser_proto::ReLoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vipuser_proto::ReLoginResponse>>(AsyncReLoginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vipuser_proto::ReLoginResponse>> PrepareAsyncReLogin(::grpc::ClientContext* context, const ::vipuser_proto::ReLoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vipuser_proto::ReLoginResponse>>(PrepareAsyncReLoginRaw(context, request, cq));
    }
    ::grpc::Status DoBusiness(::grpc::ClientContext* context, const ::vipuser_proto::BusinessRequest& request, ::vipuser_proto::BusinessResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vipuser_proto::BusinessResponse>> AsyncDoBusiness(::grpc::ClientContext* context, const ::vipuser_proto::BusinessRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vipuser_proto::BusinessResponse>>(AsyncDoBusinessRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vipuser_proto::BusinessResponse>> PrepareAsyncDoBusiness(::grpc::ClientContext* context, const ::vipuser_proto::BusinessRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vipuser_proto::BusinessResponse>>(PrepareAsyncDoBusinessRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void CreateAcount(::grpc::ClientContext* context, const ::vipuser_proto::CreateAccountRequest* request, ::vipuser_proto::CreateAccountResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateAcount(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vipuser_proto::CreateAccountResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CreateAcount(::grpc::ClientContext* context, const ::vipuser_proto::CreateAccountRequest* request, ::vipuser_proto::CreateAccountResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CreateAcount(::grpc::ClientContext* context, const ::vipuser_proto::CreateAccountRequest* request, ::vipuser_proto::CreateAccountResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CreateAcount(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vipuser_proto::CreateAccountResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CreateAcount(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vipuser_proto::CreateAccountResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Login(::grpc::ClientContext* context, const ::vipuser_proto::LoginRequest* request, ::vipuser_proto::LoginResponse* response, std::function<void(::grpc::Status)>) override;
      void Login(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vipuser_proto::LoginResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Login(::grpc::ClientContext* context, const ::vipuser_proto::LoginRequest* request, ::vipuser_proto::LoginResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Login(::grpc::ClientContext* context, const ::vipuser_proto::LoginRequest* request, ::vipuser_proto::LoginResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Login(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vipuser_proto::LoginResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Login(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vipuser_proto::LoginResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Logout(::grpc::ClientContext* context, const ::vipuser_proto::LogoutRequest* request, ::vipuser_proto::LogoutResponse* response, std::function<void(::grpc::Status)>) override;
      void Logout(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vipuser_proto::LogoutResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Logout(::grpc::ClientContext* context, const ::vipuser_proto::LogoutRequest* request, ::vipuser_proto::LogoutResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Logout(::grpc::ClientContext* context, const ::vipuser_proto::LogoutRequest* request, ::vipuser_proto::LogoutResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Logout(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vipuser_proto::LogoutResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Logout(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vipuser_proto::LogoutResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void ReLogin(::grpc::ClientContext* context, const ::vipuser_proto::ReLoginRequest* request, ::vipuser_proto::ReLoginResponse* response, std::function<void(::grpc::Status)>) override;
      void ReLogin(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vipuser_proto::ReLoginResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ReLogin(::grpc::ClientContext* context, const ::vipuser_proto::ReLoginRequest* request, ::vipuser_proto::ReLoginResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ReLogin(::grpc::ClientContext* context, const ::vipuser_proto::ReLoginRequest* request, ::vipuser_proto::ReLoginResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ReLogin(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vipuser_proto::ReLoginResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ReLogin(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vipuser_proto::ReLoginResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void DoBusiness(::grpc::ClientContext* context, const ::vipuser_proto::BusinessRequest* request, ::vipuser_proto::BusinessResponse* response, std::function<void(::grpc::Status)>) override;
      void DoBusiness(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vipuser_proto::BusinessResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DoBusiness(::grpc::ClientContext* context, const ::vipuser_proto::BusinessRequest* request, ::vipuser_proto::BusinessResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DoBusiness(::grpc::ClientContext* context, const ::vipuser_proto::BusinessRequest* request, ::vipuser_proto::BusinessResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DoBusiness(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vipuser_proto::BusinessResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DoBusiness(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::vipuser_proto::BusinessResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::vipuser_proto::CreateAccountResponse>* AsyncCreateAcountRaw(::grpc::ClientContext* context, const ::vipuser_proto::CreateAccountRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vipuser_proto::CreateAccountResponse>* PrepareAsyncCreateAcountRaw(::grpc::ClientContext* context, const ::vipuser_proto::CreateAccountRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vipuser_proto::LoginResponse>* AsyncLoginRaw(::grpc::ClientContext* context, const ::vipuser_proto::LoginRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vipuser_proto::LoginResponse>* PrepareAsyncLoginRaw(::grpc::ClientContext* context, const ::vipuser_proto::LoginRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vipuser_proto::LogoutResponse>* AsyncLogoutRaw(::grpc::ClientContext* context, const ::vipuser_proto::LogoutRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vipuser_proto::LogoutResponse>* PrepareAsyncLogoutRaw(::grpc::ClientContext* context, const ::vipuser_proto::LogoutRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vipuser_proto::ReLoginResponse>* AsyncReLoginRaw(::grpc::ClientContext* context, const ::vipuser_proto::ReLoginRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vipuser_proto::ReLoginResponse>* PrepareAsyncReLoginRaw(::grpc::ClientContext* context, const ::vipuser_proto::ReLoginRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vipuser_proto::BusinessResponse>* AsyncDoBusinessRaw(::grpc::ClientContext* context, const ::vipuser_proto::BusinessRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vipuser_proto::BusinessResponse>* PrepareAsyncDoBusinessRaw(::grpc::ClientContext* context, const ::vipuser_proto::BusinessRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CreateAcount_;
    const ::grpc::internal::RpcMethod rpcmethod_Login_;
    const ::grpc::internal::RpcMethod rpcmethod_Logout_;
    const ::grpc::internal::RpcMethod rpcmethod_ReLogin_;
    const ::grpc::internal::RpcMethod rpcmethod_DoBusiness_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status CreateAcount(::grpc::ServerContext* context, const ::vipuser_proto::CreateAccountRequest* request, ::vipuser_proto::CreateAccountResponse* response);
    virtual ::grpc::Status Login(::grpc::ServerContext* context, const ::vipuser_proto::LoginRequest* request, ::vipuser_proto::LoginResponse* response);
    virtual ::grpc::Status Logout(::grpc::ServerContext* context, const ::vipuser_proto::LogoutRequest* request, ::vipuser_proto::LogoutResponse* response);
    virtual ::grpc::Status ReLogin(::grpc::ServerContext* context, const ::vipuser_proto::ReLoginRequest* request, ::vipuser_proto::ReLoginResponse* response);
    virtual ::grpc::Status DoBusiness(::grpc::ServerContext* context, const ::vipuser_proto::BusinessRequest* request, ::vipuser_proto::BusinessResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateAcount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateAcount() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreateAcount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateAcount(::grpc::ServerContext* /*context*/, const ::vipuser_proto::CreateAccountRequest* /*request*/, ::vipuser_proto::CreateAccountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateAcount(::grpc::ServerContext* context, ::vipuser_proto::CreateAccountRequest* request, ::grpc::ServerAsyncResponseWriter< ::vipuser_proto::CreateAccountResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Login() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::vipuser_proto::LoginRequest* /*request*/, ::vipuser_proto::LoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLogin(::grpc::ServerContext* context, ::vipuser_proto::LoginRequest* request, ::grpc::ServerAsyncResponseWriter< ::vipuser_proto::LoginResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Logout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Logout() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Logout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Logout(::grpc::ServerContext* /*context*/, const ::vipuser_proto::LogoutRequest* /*request*/, ::vipuser_proto::LogoutResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLogout(::grpc::ServerContext* context, ::vipuser_proto::LogoutRequest* request, ::grpc::ServerAsyncResponseWriter< ::vipuser_proto::LogoutResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ReLogin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ReLogin() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_ReLogin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReLogin(::grpc::ServerContext* /*context*/, const ::vipuser_proto::ReLoginRequest* /*request*/, ::vipuser_proto::ReLoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReLogin(::grpc::ServerContext* context, ::vipuser_proto::ReLoginRequest* request, ::grpc::ServerAsyncResponseWriter< ::vipuser_proto::ReLoginResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DoBusiness : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DoBusiness() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_DoBusiness() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoBusiness(::grpc::ServerContext* /*context*/, const ::vipuser_proto::BusinessRequest* /*request*/, ::vipuser_proto::BusinessResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDoBusiness(::grpc::ServerContext* context, ::vipuser_proto::BusinessRequest* request, ::grpc::ServerAsyncResponseWriter< ::vipuser_proto::BusinessResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreateAcount<WithAsyncMethod_Login<WithAsyncMethod_Logout<WithAsyncMethod_ReLogin<WithAsyncMethod_DoBusiness<Service > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CreateAcount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_CreateAcount() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::vipuser_proto::CreateAccountRequest, ::vipuser_proto::CreateAccountResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::vipuser_proto::CreateAccountRequest* request, ::vipuser_proto::CreateAccountResponse* response) { return this->CreateAcount(context, request, response); }));}
    void SetMessageAllocatorFor_CreateAcount(
        ::grpc::experimental::MessageAllocator< ::vipuser_proto::CreateAccountRequest, ::vipuser_proto::CreateAccountResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::vipuser_proto::CreateAccountRequest, ::vipuser_proto::CreateAccountResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CreateAcount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateAcount(::grpc::ServerContext* /*context*/, const ::vipuser_proto::CreateAccountRequest* /*request*/, ::vipuser_proto::CreateAccountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateAcount(
      ::grpc::CallbackServerContext* /*context*/, const ::vipuser_proto::CreateAccountRequest* /*request*/, ::vipuser_proto::CreateAccountResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateAcount(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::vipuser_proto::CreateAccountRequest* /*request*/, ::vipuser_proto::CreateAccountResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Login() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::vipuser_proto::LoginRequest, ::vipuser_proto::LoginResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::vipuser_proto::LoginRequest* request, ::vipuser_proto::LoginResponse* response) { return this->Login(context, request, response); }));}
    void SetMessageAllocatorFor_Login(
        ::grpc::experimental::MessageAllocator< ::vipuser_proto::LoginRequest, ::vipuser_proto::LoginResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::vipuser_proto::LoginRequest, ::vipuser_proto::LoginResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::vipuser_proto::LoginRequest* /*request*/, ::vipuser_proto::LoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Login(
      ::grpc::CallbackServerContext* /*context*/, const ::vipuser_proto::LoginRequest* /*request*/, ::vipuser_proto::LoginResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Login(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::vipuser_proto::LoginRequest* /*request*/, ::vipuser_proto::LoginResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Logout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Logout() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::vipuser_proto::LogoutRequest, ::vipuser_proto::LogoutResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::vipuser_proto::LogoutRequest* request, ::vipuser_proto::LogoutResponse* response) { return this->Logout(context, request, response); }));}
    void SetMessageAllocatorFor_Logout(
        ::grpc::experimental::MessageAllocator< ::vipuser_proto::LogoutRequest, ::vipuser_proto::LogoutResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::vipuser_proto::LogoutRequest, ::vipuser_proto::LogoutResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Logout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Logout(::grpc::ServerContext* /*context*/, const ::vipuser_proto::LogoutRequest* /*request*/, ::vipuser_proto::LogoutResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Logout(
      ::grpc::CallbackServerContext* /*context*/, const ::vipuser_proto::LogoutRequest* /*request*/, ::vipuser_proto::LogoutResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Logout(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::vipuser_proto::LogoutRequest* /*request*/, ::vipuser_proto::LogoutResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ReLogin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ReLogin() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::vipuser_proto::ReLoginRequest, ::vipuser_proto::ReLoginResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::vipuser_proto::ReLoginRequest* request, ::vipuser_proto::ReLoginResponse* response) { return this->ReLogin(context, request, response); }));}
    void SetMessageAllocatorFor_ReLogin(
        ::grpc::experimental::MessageAllocator< ::vipuser_proto::ReLoginRequest, ::vipuser_proto::ReLoginResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::vipuser_proto::ReLoginRequest, ::vipuser_proto::ReLoginResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ReLogin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReLogin(::grpc::ServerContext* /*context*/, const ::vipuser_proto::ReLoginRequest* /*request*/, ::vipuser_proto::ReLoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ReLogin(
      ::grpc::CallbackServerContext* /*context*/, const ::vipuser_proto::ReLoginRequest* /*request*/, ::vipuser_proto::ReLoginResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ReLogin(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::vipuser_proto::ReLoginRequest* /*request*/, ::vipuser_proto::ReLoginResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DoBusiness : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DoBusiness() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::vipuser_proto::BusinessRequest, ::vipuser_proto::BusinessResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::vipuser_proto::BusinessRequest* request, ::vipuser_proto::BusinessResponse* response) { return this->DoBusiness(context, request, response); }));}
    void SetMessageAllocatorFor_DoBusiness(
        ::grpc::experimental::MessageAllocator< ::vipuser_proto::BusinessRequest, ::vipuser_proto::BusinessResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::vipuser_proto::BusinessRequest, ::vipuser_proto::BusinessResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DoBusiness() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoBusiness(::grpc::ServerContext* /*context*/, const ::vipuser_proto::BusinessRequest* /*request*/, ::vipuser_proto::BusinessResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DoBusiness(
      ::grpc::CallbackServerContext* /*context*/, const ::vipuser_proto::BusinessRequest* /*request*/, ::vipuser_proto::BusinessResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DoBusiness(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::vipuser_proto::BusinessRequest* /*request*/, ::vipuser_proto::BusinessResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_CreateAcount<ExperimentalWithCallbackMethod_Login<ExperimentalWithCallbackMethod_Logout<ExperimentalWithCallbackMethod_ReLogin<ExperimentalWithCallbackMethod_DoBusiness<Service > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_CreateAcount<ExperimentalWithCallbackMethod_Login<ExperimentalWithCallbackMethod_Logout<ExperimentalWithCallbackMethod_ReLogin<ExperimentalWithCallbackMethod_DoBusiness<Service > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_CreateAcount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateAcount() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreateAcount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateAcount(::grpc::ServerContext* /*context*/, const ::vipuser_proto::CreateAccountRequest* /*request*/, ::vipuser_proto::CreateAccountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Login() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::vipuser_proto::LoginRequest* /*request*/, ::vipuser_proto::LoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Logout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Logout() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Logout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Logout(::grpc::ServerContext* /*context*/, const ::vipuser_proto::LogoutRequest* /*request*/, ::vipuser_proto::LogoutResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ReLogin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ReLogin() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_ReLogin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReLogin(::grpc::ServerContext* /*context*/, const ::vipuser_proto::ReLoginRequest* /*request*/, ::vipuser_proto::ReLoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DoBusiness : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DoBusiness() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_DoBusiness() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoBusiness(::grpc::ServerContext* /*context*/, const ::vipuser_proto::BusinessRequest* /*request*/, ::vipuser_proto::BusinessResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateAcount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateAcount() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CreateAcount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateAcount(::grpc::ServerContext* /*context*/, const ::vipuser_proto::CreateAccountRequest* /*request*/, ::vipuser_proto::CreateAccountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateAcount(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Login() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::vipuser_proto::LoginRequest* /*request*/, ::vipuser_proto::LoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLogin(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Logout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Logout() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Logout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Logout(::grpc::ServerContext* /*context*/, const ::vipuser_proto::LogoutRequest* /*request*/, ::vipuser_proto::LogoutResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLogout(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReLogin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ReLogin() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_ReLogin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReLogin(::grpc::ServerContext* /*context*/, const ::vipuser_proto::ReLoginRequest* /*request*/, ::vipuser_proto::ReLoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReLogin(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DoBusiness : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DoBusiness() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_DoBusiness() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoBusiness(::grpc::ServerContext* /*context*/, const ::vipuser_proto::BusinessRequest* /*request*/, ::vipuser_proto::BusinessResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDoBusiness(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CreateAcount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_CreateAcount() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateAcount(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_CreateAcount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateAcount(::grpc::ServerContext* /*context*/, const ::vipuser_proto::CreateAccountRequest* /*request*/, ::vipuser_proto::CreateAccountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateAcount(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateAcount(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Login() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Login(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::vipuser_proto::LoginRequest* /*request*/, ::vipuser_proto::LoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Login(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Login(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Logout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Logout() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Logout(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Logout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Logout(::grpc::ServerContext* /*context*/, const ::vipuser_proto::LogoutRequest* /*request*/, ::vipuser_proto::LogoutResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Logout(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Logout(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ReLogin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ReLogin() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ReLogin(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ReLogin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReLogin(::grpc::ServerContext* /*context*/, const ::vipuser_proto::ReLoginRequest* /*request*/, ::vipuser_proto::ReLoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ReLogin(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ReLogin(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DoBusiness : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DoBusiness() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DoBusiness(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DoBusiness() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoBusiness(::grpc::ServerContext* /*context*/, const ::vipuser_proto::BusinessRequest* /*request*/, ::vipuser_proto::BusinessResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DoBusiness(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DoBusiness(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateAcount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateAcount() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::vipuser_proto::CreateAccountRequest, ::vipuser_proto::CreateAccountResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::vipuser_proto::CreateAccountRequest, ::vipuser_proto::CreateAccountResponse>* streamer) {
                       return this->StreamedCreateAcount(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateAcount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateAcount(::grpc::ServerContext* /*context*/, const ::vipuser_proto::CreateAccountRequest* /*request*/, ::vipuser_proto::CreateAccountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateAcount(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::vipuser_proto::CreateAccountRequest,::vipuser_proto::CreateAccountResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Login() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::vipuser_proto::LoginRequest, ::vipuser_proto::LoginResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::vipuser_proto::LoginRequest, ::vipuser_proto::LoginResponse>* streamer) {
                       return this->StreamedLogin(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::vipuser_proto::LoginRequest* /*request*/, ::vipuser_proto::LoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLogin(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::vipuser_proto::LoginRequest,::vipuser_proto::LoginResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Logout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Logout() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::vipuser_proto::LogoutRequest, ::vipuser_proto::LogoutResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::vipuser_proto::LogoutRequest, ::vipuser_proto::LogoutResponse>* streamer) {
                       return this->StreamedLogout(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Logout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Logout(::grpc::ServerContext* /*context*/, const ::vipuser_proto::LogoutRequest* /*request*/, ::vipuser_proto::LogoutResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLogout(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::vipuser_proto::LogoutRequest,::vipuser_proto::LogoutResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ReLogin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ReLogin() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::vipuser_proto::ReLoginRequest, ::vipuser_proto::ReLoginResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::vipuser_proto::ReLoginRequest, ::vipuser_proto::ReLoginResponse>* streamer) {
                       return this->StreamedReLogin(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ReLogin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReLogin(::grpc::ServerContext* /*context*/, const ::vipuser_proto::ReLoginRequest* /*request*/, ::vipuser_proto::ReLoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReLogin(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::vipuser_proto::ReLoginRequest,::vipuser_proto::ReLoginResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DoBusiness : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DoBusiness() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::vipuser_proto::BusinessRequest, ::vipuser_proto::BusinessResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::vipuser_proto::BusinessRequest, ::vipuser_proto::BusinessResponse>* streamer) {
                       return this->StreamedDoBusiness(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DoBusiness() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DoBusiness(::grpc::ServerContext* /*context*/, const ::vipuser_proto::BusinessRequest* /*request*/, ::vipuser_proto::BusinessResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDoBusiness(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::vipuser_proto::BusinessRequest,::vipuser_proto::BusinessResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CreateAcount<WithStreamedUnaryMethod_Login<WithStreamedUnaryMethod_Logout<WithStreamedUnaryMethod_ReLogin<WithStreamedUnaryMethod_DoBusiness<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_CreateAcount<WithStreamedUnaryMethod_Login<WithStreamedUnaryMethod_Logout<WithStreamedUnaryMethod_ReLogin<WithStreamedUnaryMethod_DoBusiness<Service > > > > > StreamedService;
};

}  // namespace vipuser_proto


#endif  // GRPC_vipuser_2eproto__INCLUDED
